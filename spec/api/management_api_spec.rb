=begin
#Talon.One API

#Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 

The version of the OpenAPI document: 

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for TalonOne::ManagementApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ManagementApi' do
  before do
    # run before each test
    @api_instance = TalonOne::ManagementApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ManagementApi' do
    it 'should create an instance of ManagementApi' do
      expect(@api_instance).to be_instance_of(TalonOne::ManagementApi)
    end
  end

  # unit tests for add_loyalty_card_points
  # Add points to card in a given loyalty program
  # Add points to the given loyalty card in the specified card-based loyalty program. 
  # @param loyalty_program_id Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
  # @param loyalty_card_identifier Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. 
  # @param body body
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'add_loyalty_card_points test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for add_loyalty_points
  # Add points to customer profile
  # Add points in the specified loyalty program for the given customer.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
  # @param loyalty_program_id The identifier for the loyalty program.
  # @param integration_id The identifier of the profile.
  # @param body body
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'add_loyalty_points test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for copy_campaign_to_applications
  # Copy the campaign into the specified Application
  # Copy the campaign into all specified Applications.
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param campaign_id The ID of the campaign. It is displayed in your Talon.One deployment URL.
  # @param body body
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2003]
  describe 'copy_campaign_to_applications test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_account_collection
  # Create account-level collection
  # Create account-level collection.
  # @param body body
  # @param [Hash] opts the optional parameters
  # @return [Collection]
  describe 'create_account_collection test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_additional_cost
  # Create additional cost
  # Create an [additional cost](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs).  These additional costs are shared across all applications in your account, and are never required. 
  # @param body body
  # @param [Hash] opts the optional parameters
  # @return [AccountAdditionalCost]
  describe 'create_additional_cost test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_attribute
  # Create custom attribute
  # Create a _custom attribute_ in this account. [Custom attributes](https://docs.talon.one/docs/dev/concepts/attributes) allow you to add data to Talon.One domain entities like campaigns, coupons, customers and so on.  These attributes can then be given values when creating/updating these entities, and these values can be used in your campaign rules.  For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all Applications in your account and are never required. 
  # @param body body
  # @param [Hash] opts the optional parameters
  # @return [Attribute]
  describe 'create_attribute test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_campaign_from_template
  # Create campaign from campaign template
  # Use the campaign template referenced in the request body to create a new campaign in one of the connected Applications.  If the template was created from a campaign with rules referencing [campaign collections](https://docs.talon.one/docs/product/campaigns/managing-collections), the corresponding collections for the new campaign are created automatically. 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param body body
  # @param [Hash] opts the optional parameters
  # @return [CreateTemplateCampaignResponse]
  describe 'create_campaign_from_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_collection
  # Create collection
  # Create a collection.
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param campaign_id The ID of the campaign. It is displayed in your Talon.One deployment URL.
  # @param body body
  # @param [Hash] opts the optional parameters
  # @return [Collection]
  describe 'create_collection test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_coupons
  # Create coupons
  # Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param campaign_id The ID of the campaign. It is displayed in your Talon.One deployment URL.
  # @param body body
  # @param [Hash] opts the optional parameters
  # @option opts [String] :silent Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the perfomance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles. 
  # @return [InlineResponse2006]
  describe 'create_coupons test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_coupons_async
  # Create coupons asynchronously
  # Create up to 5,000,000 coupons asynchronously. You should typically use this enpdoint when you create at least 20,001 coupons. You receive an email when the creation is complete.  If you want to create less than 20,001 coupons, you can use the [Create coupons](https://docs.talon.one/management-api#tag/Coupons/operation/createCoupons) endpoint. 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param campaign_id The ID of the campaign. It is displayed in your Talon.One deployment URL.
  # @param body body
  # @param [Hash] opts the optional parameters
  # @return [AsyncCouponCreationResponse]
  describe 'create_coupons_async test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_coupons_for_multiple_recipients
  # Create coupons for multiple recipients
  # Create coupons according to some pattern for up to 1000 recipients.
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param campaign_id The ID of the campaign. It is displayed in your Talon.One deployment URL.
  # @param body body
  # @param [Hash] opts the optional parameters
  # @option opts [String] :silent Possible values: &#x60;yes&#x60; or &#x60;no&#x60;. - &#x60;yes&#x60;: Increases the perfomance of the API call by returning a 204 response. - &#x60;no&#x60;: Returns a 200 response that contains the updated customer profiles. 
  # @return [InlineResponse2006]
  describe 'create_coupons_for_multiple_recipients test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_notification_webhook
  # Create notification about campaign-related changes
  # Create a [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications).  A notification about campaign-related changes is different from regular webhooks in that it is Application-scoped and has a predefined payload. [Regular webhooks](https://docs.talon.one/docs/dev/getting-started/webhooks) have user-definable payloads.  **Tip:**  - You can create these notifications using the Campaign Manager. See [Managing notifications](https://docs.talon.one/docs/product/applications/outbound-notifications). - You can review the payload you will receive in the [specs](https://docs.talon.one/outbound-notifications#/paths/campaign_created/post). 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param body body
  # @param [Hash] opts the optional parameters
  # @return [NotificationWebhook]
  describe 'create_notification_webhook test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_password_recovery_email
  # Request a password reset
  # Send an email with a password recovery link to the email address of an existing account.  **Note:** The password recovery link expires 30 minutes after this endpoint is triggered. 
  # @param body body
  # @param [Hash] opts the optional parameters
  # @return [NewPasswordEmail]
  describe 'create_password_recovery_email test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_session
  # Create session
  # Create a session to use the Management API endpoints. Use the value of the &#x60;token&#x60; property provided in the response as bearer token in other API calls.  A token is valid for 3 months. In accordance with best pratices, use your generated token for all your API requests. Do **not** regenerate a token for each request.  This endpoint has a rate limit of 3 to 6 requests per second per account, depending on your setup.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Granular API key&lt;/p&gt;   Instead of using a session, you can also use the &lt;a href&#x3D;\&quot;https://docs.talon.one/docs/product/account/dev-tools/managing-mapi-keys\&quot;&gt;Management API key feature&lt;/a&gt;   in the Campaign Manager to decide which endpoints can be used with a given key. &lt;/div&gt; 
  # @param body body
  # @param [Hash] opts the optional parameters
  # @return [Session]
  describe 'create_session test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for deduct_loyalty_card_points
  # Deduct points from card in a given loyalty program.
  # Deduct points from the given loyalty card in the specified card-based loyalty program. 
  # @param loyalty_program_id Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
  # @param loyalty_card_identifier Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. 
  # @param body body
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'deduct_loyalty_card_points test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_account_collection
  # Delete account-level collection
  # Delete the given account-level collection.
  # @param collection_id The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_account_collection test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_campaign
  # Delete campaign
  # Delete the given campaign.
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param campaign_id The ID of the campaign. It is displayed in your Talon.One deployment URL.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_campaign test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_collection
  # Delete collection
  # Delete the given collection.
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param campaign_id The ID of the campaign. It is displayed in your Talon.One deployment URL.
  # @param collection_id The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_collection test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_coupon
  # Delete coupon
  # Delete the specified coupon.
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param campaign_id The ID of the campaign. It is displayed in your Talon.One deployment URL.
  # @param coupon_id The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_coupon test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_coupons
  # Delete coupons
  # Deletes all the coupons matching the specified criteria.
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param campaign_id The ID of the campaign. It is displayed in your Talon.One deployment URL.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
  # @option opts [DateTime] :created_before Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
  # @option opts [DateTime] :created_after Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
  # @option opts [DateTime] :starts_after Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
  # @option opts [DateTime] :starts_before Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
  # @option opts [DateTime] :expires_after Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
  # @option opts [DateTime] :expires_before Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
  # @option opts [String] :valid - &#x60;expired&#x60;: Matches coupons in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches coupons in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches coupons in which start date is set and in the future. 
  # @option opts [String] :batch_id Filter results by batches of coupons
  # @option opts [String] :usable - &#x60;true&#x60;: only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;: only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned. 
  # @option opts [Integer] :referral_id Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code.
  # @option opts [String] :recipient_integration_id Filter results by match with a profile id specified in the coupon&#39;s &#x60;RecipientIntegrationId&#x60; field. 
  # @option opts [Boolean] :exact_match Filter results to an exact case-insensitive matching against the coupon code
  # @return [nil]
  describe 'delete_coupons test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_loyalty_card
  # Delete loyalty card
  # Delete the given loyalty card.
  # @param loyalty_program_id Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
  # @param loyalty_card_identifier Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_loyalty_card test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_notification_webhook
  # Delete notification about campaign-related changes
  # Remove the given existing [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications). 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param notification_webhook_id The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_notification_webhook test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_referral
  # Delete referral
  # Delete the specified referral.
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param campaign_id The ID of the campaign. It is displayed in your Talon.One deployment URL.
  # @param referral_id The ID of the referral code.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_referral test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for destroy_session
  # Destroy session
  # Destroys the session.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'destroy_session test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_account_collection_items
  # Export account-level collection&#39;s items
  # Download a CSV file containing items from an account-level collection.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
  # @param collection_id The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'export_account_collection_items test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_collection_items
  # Export a collection&#39;s items
  # Download a CSV file containing a collection&#39;s items.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param campaign_id The ID of the campaign. It is displayed in your Talon.One deployment URL.
  # @param collection_id The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'export_collection_items test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_coupons
  # Export coupons
  # Download a CSV file containing the coupons that match the given properties.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;accountid&#x60;: The ID of your deployment. - &#x60;applicationid&#x60;: The ID of the Application this coupon is related to. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. - &#x60;batchid&#x60;: The ID of the batch this coupon is part of. - &#x60;campaignid&#x60;: The ID of the campaign this coupon is related to. - &#x60;counter&#x60;: The number of times this coupon has been redeemed. - &#x60;created&#x60;: The creation date of the coupon code. - &#x60;deleted&#x60;: Whether the coupon code is deleted. - &#x60;deleted_changelogid&#x60;: The ID of the delete event in the logs. - &#x60;discount_counter&#x60;: The amount of discount given by this coupon. - &#x60;discount_limitval&#x60;: The maximum discount amount that can be given be this coupon. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;id&#x60;: The internal ID of the coupon code. - &#x60;importid&#x60;: The ID of the import job that created this coupon. - &#x60;is_reservation_mandatory&#x60;: Whether this coupon requires a reservation to be redeemed. - &#x60;limits&#x60;: The limits set on this coupon. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. - &#x60;recipientintegrationid&#x60;: The integration ID of the customer considered as recipient of the coupon.   Only the customer with this integration ID can redeem the corresponding coupon code.   Learn about [coupon reservation](https://docs.talon.one/docs/product/rules/effects/using-effects#reserving-a-coupon-code). - &#x60;referralid&#x60;: The ID of the referral code that triggered the creation of this coupon (create coupon effect). - &#x60;reservation&#x60;: Whether the coupon is reserved. - &#x60;reservation_counter&#x60;: How many times this coupon has been reserved. - &#x60;reservation_limitval&#x60;: The maximum of number of reservations this coupon can have. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;value&#x60;: The coupon code. 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :campaign_id Filter results by campaign.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @option opts [String] :value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
  # @option opts [DateTime] :created_before Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
  # @option opts [DateTime] :created_after Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
  # @option opts [String] :valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future. 
  # @option opts [String] :usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
  # @option opts [Integer] :referral_id Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code.
  # @option opts [String] :recipient_integration_id Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field
  # @option opts [String] :batch_id Filter results by batches of coupons
  # @option opts [Boolean] :exact_match Filter results to an exact case-insensitive matching against the coupon code
  # @option opts [String] :date_format Determines the format of dates in the export document.
  # @option opts [String] :campaign_state Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts. 
  # @return [String]
  describe 'export_coupons test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_customer_sessions
  # Export customer sessions
  # Download a CSV file containing the customer sessions that match the request.  **Important:** Archived sessions cannot be exported. See the [retention policy](https://docs.talon.one/docs/product/server-infrastructure-and-data-retention#data-retention-policy).  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  - &#x60;id&#x60;: The internal ID of the session. - &#x60;firstsession&#x60;: Whether this is a first session. - &#x60;integrationid&#x60;: The integration ID of the session. - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;profileintegrationid&#x60;: The integration ID of the customer profile. - &#x60;created&#x60;: The timestamp when the session was created. - &#x60;state&#x60;: The [state](https://docs.talon.one/docs/dev/concepts/entities#customer-session-states) of the session. - &#x60;cartitems&#x60;: The cart items in the session. - &#x60;discounts&#x60;: The discounts in the session. - &#x60;total&#x60;: The total value of the session. - &#x60;attributes&#x60;: The attributes set in the session. - &#x60;closedat&#x60;: Timestamp when the session was closed. - &#x60;cancelledat&#x60;: Timestamp when the session was cancelled. - &#x60;referral&#x60;: The referral code in the session. - &#x60;identifiers&#x60;: The identifiers in the session. - &#x60;additional_costs&#x60;: The [additional costs](https://docs.talon.one/docs/product/account/dev-tools/managing-additional-costs) in the session. - &#x60;updated&#x60;: Timestamp of the last session update. - &#x60;coupons&#x60;: Coupon codes in the session. 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :created_before Filter results comparing the parameter value, expected to be an RFC3339 timestamp string.
  # @option opts [DateTime] :created_after Filter results comparing the parameter value, expected to be an RFC3339 timestamp string.
  # @option opts [String] :profile_integration_id Only return sessions for the customer that matches this customer integration ID.
  # @option opts [String] :date_format Determines the format of dates in the export document.
  # @option opts [String] :customer_session_state Filter results by state.
  # @return [String]
  describe 'export_customer_sessions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_effects
  # Export triggered effects
  # Download a CSV file containing the triggered effects that match the given attributes.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;applicationid&#x60;: The ID of the Application. - &#x60;campaignid&#x60;: The ID of the campaign. - &#x60;couponid&#x60;: The ID of the coupon, when applicable to the effect. - &#x60;created&#x60;: The timestamp of the effect. - &#x60;event_type&#x60;: The name of the event. See the [docs](https://docs.talon.one/docs/dev/concepts/events). - &#x60;eventid&#x60;: The internal ID of the effect. - &#x60;name&#x60;: The effect name. See the [docs](https://docs.talon.one/docs/dev/integration-api/api-effects). - &#x60;profileintegrationid&#x60;: The ID of the customer profile, when applicable. - &#x60;props&#x60;: The [properties](https://docs.talon.one/docs/dev/integration-api/api-effects) of the effect. - &#x60;ruleindex&#x60;: The index of the rule. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;sessionid&#x60;: The internal ID of the session that triggered the effect. - &#x60;profileid&#x60;: The internal ID of the customer profile. - &#x60;sessionintegrationid&#x60;: The integration ID of the session. - &#x60;total_revenue&#x60;: The total revenue. 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :campaign_id Filter results by campaign.
  # @option opts [DateTime] :created_before Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
  # @option opts [DateTime] :created_after Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
  # @option opts [String] :date_format Determines the format of dates in the export document.
  # @return [String]
  describe 'export_effects test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_loyalty_balance
  # Export customer loyalty balance to CSV
  # ⚠️ Deprecation notice: Support for requests to this endpoint will end soon. To export customer loyalty balances to CSV, use the [Export customer loyalty balances to CSV](/management-api#tag/Loyalty/operation/exportLoyaltyBalances) endpoint.  Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
  # @param loyalty_program_id The identifier for the loyalty program.
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :end_date Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string. 
  # @return [String]
  describe 'export_loyalty_balance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_loyalty_balances
  # Export customer loyalty balances
  # Download a CSV file containing the balance of each customer in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;profileIntegrationID&#x60;: The integration ID of the customer profile. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. - &#x60;currentTier&#x60;: The tier that the customer is in at the time of the export. 
  # @param loyalty_program_id The identifier for the loyalty program.
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :end_date Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string. 
  # @return [String]
  describe 'export_loyalty_balances test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_loyalty_card_balances
  # Export loyalty card transaction logs to CSV
  # Download a CSV file containing the balances of all cards in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns: - &#x60;loyaltyProgramID&#x60;: The ID of the loyalty program. - &#x60;loyaltySubledger&#x60;: The name of the subdleger, when applicatble. - &#x60;cardIdentifier&#x60;: The alphanumeric identifier of the loyalty card. - &#x60;cardState&#x60;:The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;currentBalance&#x60;: The current point balance. - &#x60;pendingBalance&#x60;: The number of pending points. - &#x60;expiredBalance&#x60;: The number of expired points. - &#x60;spentBalance&#x60;: The number of spent points. 
  # @param loyalty_program_id Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :end_date Used to return balances only for entries older than this timestamp. The expired, active, and pending points are relative to this timestamp.  **Note:** It must be an RFC3339 timestamp string. 
  # @return [String]
  describe 'export_loyalty_card_balances test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_loyalty_card_ledger
  # Export a loyalty card ledger log
  # Download a CSV file containing a loyalty card ledger log of the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/). 
  # @param loyalty_program_id Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
  # @param loyalty_card_identifier Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. 
  # @param range_start Only return results from after this timestamp. This must be an RFC3339 timestamp string.
  # @param range_end Only return results from before this timestamp. This must be an RFC3339 timestamp string.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :date_format Determines the format of dates in the export document.
  # @return [String]
  describe 'export_loyalty_card_ledger test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_loyalty_ledger
  # Export customer&#39;s transaction logs
  # Download a CSV file containing a customer&#39;s transaction logs in the loyalty program.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The generated file can contain the following columns:  - &#x60;customerprofileid&#x60;: The ID of the profile. - &#x60;customersessionid&#x60;: The ID of the customer session. - &#x60;rulesetid&#x60;: The ID of the rule set. - &#x60;rulename&#x60;: The name of the rule. - &#x60;programid&#x60;: The ID of the loyalty program. - &#x60;type&#x60;: The type of the loyalty program. - &#x60;name&#x60;: The name of the loyalty program. - &#x60;subledgerid&#x60;: The ID of the subledger, when applicable. - &#x60;startdate&#x60;: The start date of the program. - &#x60;expirydate&#x60;: The expiration date of the program. - &#x60;id&#x60;: The ID of the transaction. - &#x60;created&#x60;: The timestamp of the creation of the loyalty program. - &#x60;amount&#x60;: The number of points in that transaction. - &#x60;archived&#x60;: Whether the session related to the transaction is archived. 
  # @param range_start Only return results from after this timestamp. This must be an RFC3339 timestamp string.
  # @param range_end Only return results from before this timestamp. This must be an RFC3339 timestamp string.
  # @param loyalty_program_id The identifier for the loyalty program.
  # @param integration_id The identifier of the profile.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :date_format Determines the format of dates in the export document.
  # @return [String]
  describe 'export_loyalty_ledger test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_referrals
  # Export referrals
  # Download a CSV file containing the referrals that match the given parameters.  **Tip:** If the exported CSV file is too large to view, you can [split it into multiple files](https://www.makeuseof.com/tag/how-to-split-a-huge-csv-excel-workbook-into-seperate-files/).  The CSV file contains the following columns:  - &#x60;code&#x60;: The referral code. - &#x60;advocateprofileintegrationid&#x60;: The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :campaign_id Filter results by campaign.
  # @option opts [DateTime] :created_before Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
  # @option opts [DateTime] :created_after Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
  # @option opts [String] :valid - &#x60;expired&#x60;: Matches referrals in which the expiration date is set and in the past. - &#x60;validNow&#x60;: Matches referrals in which start date is null or in the past and expiration date is null or in the future. - &#x60;validFuture&#x60;: Matches referrals in which start date is set and in the future. 
  # @option opts [String] :usable - &#x60;true&#x60;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned. - &#x60;false&#x60;, only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60; will be returned. 
  # @option opts [String] :batch_id Filter results by batches of referrals
  # @option opts [String] :date_format Determines the format of dates in the export document.
  # @return [String]
  describe 'export_referrals test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_access_logs_without_total_count
  # Get access logs for Application
  # Retrieve the list of API calls sent to the specified Application. 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param range_start Only return results from after this timestamp. This must be an RFC3339 timestamp string.
  # @param range_end Only return results from before this timestamp. This must be an RFC3339 timestamp string.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Only return results where the request path matches the given regular expression.
  # @option opts [String] :method Only return results where the request method matches the given regular expression.
  # @option opts [String] :status Filter results by HTTP status codes.
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @return [InlineResponse20017]
  describe 'get_access_logs_without_total_count test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account
  # Get account details
  # Return the details of your companies Talon.One account. 
  # @param account_id The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. 
  # @param [Hash] opts the optional parameters
  # @return [Account]
  describe 'get_account test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_analytics
  # Get account analytics
  # Return the analytics of your Talon.One account. 
  # @param account_id The identifier of the account. Retrieve it via the [List users in account](https://docs.talon.one/management-api#operation/getUsers) endpoint in the &#x60;accountId&#x60; property. 
  # @param [Hash] opts the optional parameters
  # @return [AccountAnalytics]
  describe 'get_account_analytics test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_collection
  # Get account-level collection
  # Retrieve a given account-level collection.
  # @param collection_id The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
  # @param [Hash] opts the optional parameters
  # @return [Collection]
  describe 'get_account_collection test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_additional_cost
  # Get additional cost
  # Returns the additional cost. 
  # @param additional_cost_id The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. 
  # @param [Hash] opts the optional parameters
  # @return [AccountAdditionalCost]
  describe 'get_additional_cost test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_additional_costs
  # List additional costs
  # Returns all the defined additional costs for the account. 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @return [InlineResponse20031]
  describe 'get_additional_costs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_access_logs
  # List access logs
  # Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
  # @param range_start Only return results from after this timestamp. This must be an RFC3339 timestamp string.
  # @param range_end Only return results from before this timestamp. This must be an RFC3339 timestamp string.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Only return results where the request path matches the given regular expression.
  # @option opts [String] :method Only return results where the request method matches the given regular expression.
  # @option opts [String] :status Filter results by HTTP status codes.
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @return [InlineResponse20018]
  describe 'get_all_access_logs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_roles
  # List roles
  # List all roles.
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20039]
  describe 'get_all_roles test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_application
  # Get Application
  # Get the application specified by the ID.
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param [Hash] opts the optional parameters
  # @return [Application]
  describe 'get_application test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_application_api_health
  # Get Application health
  # Display the health of the Application and show the last time the Application was used.  You can also display this information from the **Settings** of an Application, in the **Developer Settings** menu. See the [docs](https://docs.talon.one/docs/dev/tutorials/monitoring-integration-status). 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param [Hash] opts the optional parameters
  # @return [ApplicationApiHealth]
  describe 'get_application_api_health test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_application_customer
  # Get application&#39;s customer
  # Retrieve the customers of the specified application. 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param customer_id The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. 
  # @param [Hash] opts the optional parameters
  # @return [ApplicationCustomer]
  describe 'get_application_customer test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_application_customer_friends
  # List friends referred by customer profile
  # List the friends referred by the specified customer profile in this Application. 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param integration_id The Integration ID of the Advocate&#39;s Profile.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @option opts [Boolean] :with_total_result_size When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query. 
  # @return [InlineResponse20029]
  describe 'get_application_customer_friends test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_application_customers
  # List application&#39;s customers
  # List all the customers of the specified application.
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :integration_id Filter results performing an exact matching against the profile integration identifier.
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [Boolean] :with_total_result_size When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query. 
  # @return [InlineResponse20020]
  describe 'get_application_customers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_application_customers_by_attributes
  # List application customers matching the given attributes
  # Get a list of the application customers matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param body body
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [Boolean] :with_total_result_size When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query. 
  # @return [InlineResponse20021]
  describe 'get_application_customers_by_attributes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_application_event_types
  # List Applications event types
  # Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](https://docs.talon.one/integration-api#operation/trackEvent) 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @return [InlineResponse20027]
  describe 'get_application_event_types test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_application_events_without_total_count
  # List Applications events
  # Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @option opts [String] :type Comma-separated list of types by which to filter events. Must be exact match(es).
  # @option opts [DateTime] :created_before Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally.
  # @option opts [DateTime] :created_after Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally.
  # @option opts [String] :session Session integration ID filter for events. Must be exact match.
  # @option opts [String] :profile Profile integration ID filter for events. Must be exact match.
  # @option opts [String] :customer_name Customer name filter for events. Will match substrings case-insensitively.
  # @option opts [String] :customer_email Customer e-mail address filter for events. Will match substrings case-insensitively.
  # @option opts [String] :coupon_code Coupon code
  # @option opts [String] :referral_code Referral code
  # @option opts [String] :rule_query Rule name filter for events
  # @option opts [String] :campaign_query Campaign name filter for events
  # @return [InlineResponse20026]
  describe 'get_application_events_without_total_count test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_application_session
  # Get Application session
  # Get the details of the given session. You can list the sessions with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param session_id The **internal** ID of the session. You can get the ID with the [List Application sessions](https://docs.talon.one/management-api#tag/Customer-data/operation/getApplicationSessions) endpoint. 
  # @param [Hash] opts the optional parameters
  # @return [ApplicationSession]
  describe 'get_application_session test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_application_sessions
  # List Application sessions
  # List all the sessions of the specified Application. 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @option opts [String] :profile Profile integration ID filter for sessions. Must be exact match.
  # @option opts [String] :state Filter by sessions with this state. Must be exact match.
  # @option opts [DateTime] :created_before Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally.
  # @option opts [DateTime] :created_after Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally.
  # @option opts [String] :coupon Filter by sessions with this coupon. Must be exact match.
  # @option opts [String] :referral Filter by sessions with this referral. Must be exact match.
  # @option opts [String] :integration_id Filter by sessions with this integrationId. Must be exact match.
  # @return [InlineResponse20025]
  describe 'get_application_sessions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_applications
  # List Applications
  # List all applications in the current account.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @return [InlineResponse2002]
  describe 'get_applications test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_attribute
  # Get custom attribute
  # Retrieve the specified custom attribute. 
  # @param attribute_id The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.
  # @param [Hash] opts the optional parameters
  # @return [Attribute]
  describe 'get_attribute test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_attributes
  # List custom attributes
  # Return all the custom attributes for the account. 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @option opts [String] :entity Returned attributes will be filtered by supplied entity.
  # @return [InlineResponse20030]
  describe 'get_attributes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_audiences
  # List audiences
  # Get all audiences created in the account. To create an audience, use [Create audience](https://docs.talon.one/integration-api#tag/Audiences/operation/createAudienceV2). 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @option opts [Boolean] :with_total_result_size When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query. 
  # @return [InlineResponse20028]
  describe 'get_audiences test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_campaign
  # Get campaign
  # Retrieve the given campaign.
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param campaign_id The ID of the campaign. It is displayed in your Talon.One deployment URL.
  # @param [Hash] opts the optional parameters
  # @return [Campaign]
  describe 'get_campaign test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_campaign_analytics
  # Get analytics of campaigns
  # Retrieve statistical data about the performance of the given campaign.
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param campaign_id The ID of the campaign. It is displayed in your Talon.One deployment URL.
  # @param range_start Only return results from after this timestamp. This must be an RFC3339 timestamp string.
  # @param range_end Only return results from before this timestamp. This must be an RFC3339 timestamp string.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :granularity The time interval between the results in the returned time-series.
  # @return [InlineResponse20019]
  describe 'get_campaign_analytics test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_campaign_by_attributes
  # List campaigns that match the given attributes
  # Get a list of all the campaigns that match a set of attributes. 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param body body
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @option opts [String] :campaign_state Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts. 
  # @return [InlineResponse2003]
  describe 'get_campaign_by_attributes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_campaign_templates
  # List campaign templates
  # Retrieve a list of campaign templates.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @option opts [String] :state Filter results by the state of the campaign template.
  # @option opts [String] :name Filter results performing case-insensitive matching against the name of the campaign template.
  # @option opts [String] :tags Filter results performing case-insensitive matching against the tags of the campaign template. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values. 
  # @option opts [Integer] :user_id Filter results by user ID.
  # @return [InlineResponse2009]
  describe 'get_campaign_templates test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_campaigns
  # List campaigns
  # List the campaigns of the specified application that match your filter criteria. 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @option opts [String] :campaign_state Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts. 
  # @option opts [String] :name Filter results performing case-insensitive matching against the name of the campaign.
  # @option opts [String] :tags Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values 
  # @option opts [DateTime] :created_before Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
  # @option opts [DateTime] :created_after Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
  # @option opts [Integer] :campaign_group_id Filter results to campaigns owned by the specified campaign group ID.
  # @option opts [Integer] :template_id The ID of the Campaign Template this Campaign was created from.
  # @return [InlineResponse2003]
  describe 'get_campaigns test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_changes
  # Get audit logs for an account
  # Retrieve the audit logs displayed in **Accounts &gt; Audit logs**. 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @option opts [Float] :application_id Filter results by Application ID.
  # @option opts [String] :entity_path Filter results on a case insensitive matching of the url path of the entity
  # @option opts [Integer] :user_id Filter results by user ID.
  # @option opts [DateTime] :created_before Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
  # @option opts [DateTime] :created_after Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
  # @option opts [Boolean] :with_total_result_size When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query. 
  # @option opts [Integer] :management_key_id Filter results that match the given management key ID.
  # @option opts [Boolean] :include_old When this flag is set to false, the state without the change will not be returned. The default value is true.
  # @return [InlineResponse20037]
  describe 'get_changes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_collection
  # Get collection
  # Retrieve a given collection.
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param campaign_id The ID of the campaign. It is displayed in your Talon.One deployment URL.
  # @param collection_id The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
  # @param [Hash] opts the optional parameters
  # @return [Collection]
  describe 'get_collection test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_collection_items
  # Get collection items
  # Retrieve the items from the given collection.
  # @param collection_id The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @return [InlineResponse20015]
  describe 'get_collection_items test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_coupons_without_total_count
  # List coupons
  # List all the coupons matching the specified criteria. 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param campaign_id The ID of the campaign. It is displayed in your Talon.One deployment URL.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @option opts [String] :value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
  # @option opts [DateTime] :created_before Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
  # @option opts [DateTime] :created_after Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
  # @option opts [String] :valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future. 
  # @option opts [String] :usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
  # @option opts [Integer] :referral_id Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code.
  # @option opts [String] :recipient_integration_id Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field
  # @option opts [String] :batch_id Filter results by batches of coupons
  # @option opts [Boolean] :exact_match Filter results to an exact case-insensitive matching against the coupon code
  # @return [InlineResponse2007]
  describe 'get_coupons_without_total_count test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_customer_activity_report
  # Get customer&#39;s activity report
  # Fetch the summary report of a given customer in the given application, in a time range.
  # @param range_start Only return results from after this timestamp. This must be an RFC3339 timestamp string.
  # @param range_end Only return results from before this timestamp. This must be an RFC3339 timestamp string.
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param customer_id The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @return [CustomerActivityReport]
  describe 'get_customer_activity_report test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_customer_activity_reports_without_total_count
  # Get Activity Reports for Application Customers
  # Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only mentions whether there are more results. 
  # @param range_start Only return results from after this timestamp. This must be an RFC3339 timestamp string.
  # @param range_end Only return results from before this timestamp. This must be an RFC3339 timestamp string.
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @option opts [String] :name Only return reports matching the customer name
  # @option opts [String] :integration_id Filter results performing an exact matching against the profile integration identifier.
  # @option opts [String] :campaign_name Only return reports matching the campaignName
  # @option opts [String] :advocate_name Only return reports matching the current customer referrer name
  # @return [InlineResponse20024]
  describe 'get_customer_activity_reports_without_total_count test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_customer_analytics
  # Get customer&#39;s analytics report
  # Fetch analytics for a given customer in the given application.
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param customer_id The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @return [CustomerAnalytics]
  describe 'get_customer_analytics test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_customer_profile
  # Get customer profile
  # Return the details of the specified customer profile.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Performance tips&lt;/p&gt;    You can retrieve the same information via the Integration API, which can save you extra API requests. consider these options:    - Request the customer profile to be part of the response content using     [Update Customer Session](https://docs.talon.one/integration-api#tag/Customer-sessions/operation/updateCustomerSessionV2).   - Send an empty update with the [Update Customer Profile](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/updateCustomerProfileV2) endpoint with &#x60;runRuleEngine&#x3D;false&#x60;. &lt;/div&gt; 
  # @param customer_id The value of the &#x60;id&#x60; property of a customer profile. Get it with the [List Application&#39;s customers](https://docs.talon.one/management-api#operation/getApplicationCustomers) endpoint. 
  # @param [Hash] opts the optional parameters
  # @return [CustomerProfile]
  describe 'get_customer_profile test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_customer_profiles
  # List customer profiles
  # List all customer profiles.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [Boolean] :sandbox Indicates whether you are pointing to a sandbox or Live customer.
  # @return [InlineResponse20023]
  describe 'get_customer_profiles test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_customers_by_attributes
  # List customer profiles matching the given attributes
  # Get a list of the customer profiles matching the provided criteria.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request. 
  # @param body body
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [Boolean] :sandbox Indicates whether you are pointing to a sandbox or Live customer.
  # @return [InlineResponse20022]
  describe 'get_customers_by_attributes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_event_types
  # List event types
  # Fetch all event type definitions for your account. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :name Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;.
  # @option opts [Boolean] :include_old_versions Include all versions of every event type.
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @return [InlineResponse20035]
  describe 'get_event_types test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_exports
  # Get exports
  # List all past exports 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [Float] :application_id Filter results by Application ID.
  # @option opts [Integer] :campaign_id Filter by the campaign ID on which the limit counters are used.
  # @option opts [String] :entity The name of the entity type that was exported.
  # @return [InlineResponse20038]
  describe 'get_exports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_loyalty_card
  # Get loyalty card
  # Get the given loyalty card.
  # @param loyalty_program_id Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
  # @param loyalty_card_identifier Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. 
  # @param [Hash] opts the optional parameters
  # @return [LoyaltyCard]
  describe 'get_loyalty_card test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_loyalty_card_transaction_logs
  # Get loyalty card transaction logs
  # Retrieve the transaction logs for the given [loyalty card](https://docs.talon.one/docs/product/loyalty-programs/loyalty-cards/loyalty-card-overview) within the specified [card-based loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview#loyalty-program-types) with filtering options applied. If no filtering options are applied, the last 50 loyalty transactions for the given loyalty card are returned. 
  # @param loyalty_program_id Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
  # @param loyalty_card_identifier Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. 
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :start_date Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string. 
  # @option opts [DateTime] :end_date Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string. 
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :subledger_id The ID of the subledger by which we filter the data.
  # @return [InlineResponse20013]
  describe 'get_loyalty_card_transaction_logs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_loyalty_cards
  # List loyalty cards
  # For the given card-based loyalty program, list the loyalty cards that match your filter criteria. 
  # @param loyalty_program_id Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @option opts [String] :identifier Optional query parameter to search cards by identifier.
  # @option opts [Integer] :profile_id Filter by the profile ID.
  # @return [InlineResponse20012]
  describe 'get_loyalty_cards test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_loyalty_points
  # Get customer&#39;s full loyalty ledger
  # Get the loyalty ledger for this profile integration ID.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
  # @param loyalty_program_id The identifier for the loyalty program.
  # @param integration_id The identifier of the profile.
  # @param [Hash] opts the optional parameters
  # @return [LoyaltyLedger]
  describe 'get_loyalty_points test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_loyalty_program
  # Get loyalty program
  # Get the specified [loyalty program](https://docs.talon.one/docs/product/loyalty-programs/overview). To list all loyalty programs in your Application, use [List loyalty programs](#operation/getLoyaltyPrograms).  To list the loyalty programs that a customer profile is part of, use the [List customer data](https://docs.talon.one/integration-api#tag/Customer-profiles/operation/getCustomerInventory) 
  # @param loyalty_program_id Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
  # @param [Hash] opts the optional parameters
  # @return [LoyaltyProgram]
  describe 'get_loyalty_program test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_loyalty_program_transactions
  # List loyalty program transactions
  # Retrieve all loyalty program transaction logs in a given loyalty program with filtering options applied. Manual and imported transactions are also included. If no filters are applied, the last 50 loyalty transactions for the given loyalty program are returned.  **Important:** To get loyalty transaction logs for a given Integration ID in a loyalty program, we recommend using the Integration API&#39;s [Get customer&#39;s loyalty logs](https://docs.talon.one/integration-api#tag/Loyalty/operation/getLoyaltyProgramProfileTransactions). 
  # @param loyalty_program_id Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :loyalty_transaction_type Filter results by loyalty transaction type: - &#x60;manual&#x60;: Loyalty transaction that was done manually. - &#x60;session&#x60;: Loyalty transaction that resulted from a customer session. - &#x60;import&#x60;: Loyalty transaction that was imported from a CSV file. 
  # @option opts [String] :subledger_id The ID of the subledger by which we filter the data.
  # @option opts [DateTime] :start_date Date and time from which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string. 
  # @option opts [DateTime] :end_date Date and time by which results are returned. Results are filtered by transaction creation date.  **Note:** It must be an RFC3339 timestamp string. 
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @return [InlineResponse20011]
  describe 'get_loyalty_program_transactions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_loyalty_programs
  # List loyalty programs
  # List the loyalty programs of the account.
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20010]
  describe 'get_loyalty_programs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_loyalty_statistics
  # Get loyalty program statistics
  # Retrieve the statistics of the specified loyalty program such as the total active points, pending points, spent points, and expired points.  **Important:** The returned data does not include the current day. All statistics are updated daily at 11:59 PM in the loyalty program time zone. 
  # @param loyalty_program_id Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
  # @param [Hash] opts the optional parameters
  # @return [LoyaltyStatistics]
  describe 'get_loyalty_statistics test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_notification_webhook
  # Get notification about campaign-related changes
  # Return the given [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications). 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param notification_webhook_id The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.
  # @param [Hash] opts the optional parameters
  # @return [NotificationWebhook]
  describe 'get_notification_webhook test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_notification_webhooks
  # List notifications about campaign-related changes
  # List all [notifications about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications) for the given Application. 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2004]
  describe 'get_notification_webhooks test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_referrals_without_total_count
  # List referrals
  # List all referrals of the specified campaign.
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param campaign_id The ID of the campaign. It is displayed in your Talon.One deployment URL.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @option opts [String] :code Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters.
  # @option opts [DateTime] :created_before Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
  # @option opts [DateTime] :created_after Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
  # @option opts [String] :valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiration date is set and in the past. The second matches referrals in which start date is null or in the past and expiration date is null or in the future, the third matches referrals in which start date is set and in the future. 
  # @option opts [String] :usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
  # @option opts [String] :advocate Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field
  # @return [InlineResponse2008]
  describe 'get_referrals_without_total_count test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_role
  # Get role
  # Get the details of the specified role. To see all the roles, use [List roles](#operation/getAllRoles). 
  # @param role_id The Id of role. 
  # @param [Hash] opts the optional parameters
  # @return [Role]
  describe 'get_role test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_ruleset
  # Get ruleset
  # Retrieve the specified ruleset.
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param campaign_id The ID of the campaign. It is displayed in your Talon.One deployment URL.
  # @param ruleset_id The ID of the ruleset.
  # @param [Hash] opts the optional parameters
  # @return [Ruleset]
  describe 'get_ruleset test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_rulesets
  # List campaign rulesets
  # List all rulesets of this campaign. A ruleset is a revision of the rules of a campaign. **Important:** The response also includes deleted rules. You should only consider the latest revision of the returned rulesets. 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param campaign_id The ID of the campaign. It is displayed in your Talon.One deployment URL.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @return [InlineResponse2005]
  describe 'get_rulesets test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user
  # Get user
  # Retrieve the data (including an invitation code) for a user. Non-admin users can only get their own profile. 
  # @param user_id The ID of the user.
  # @param [Hash] opts the optional parameters
  # @return [User]
  describe 'get_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_users
  # List users in account
  # Retrieve all users in your account. 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @return [InlineResponse20036]
  describe 'get_users test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_webhook
  # Get webhook
  # Returns a webhook by its id.
  # @param webhook_id The ID of the webhook. You can find the ID in the Campaign Manager&#39;s URL when you display the details of the webhook in **Account** &gt; **Webhooks**. 
  # @param [Hash] opts the optional parameters
  # @return [Webhook]
  describe 'get_webhook test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_webhook_activation_logs
  # List webhook activation log entries
  # Webhook activation log entries are created as soon as an integration request triggers a webhook effect. See the [docs](https://docs.talon.one/docs/dev/getting-started/webhooks). 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @option opts [String] :integration_request_uuid Filter results by integration request UUID.
  # @option opts [Float] :webhook_id Filter results by Webhook.
  # @option opts [Float] :application_id Filter results by Application ID.
  # @option opts [Float] :campaign_id Filter results by campaign.
  # @option opts [DateTime] :created_before Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally.
  # @option opts [DateTime] :created_after Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally.
  # @return [InlineResponse20033]
  describe 'get_webhook_activation_logs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_webhook_logs
  # List webhook log entries
  # Retrieve all webhook log entries.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @option opts [String] :status Filter results by HTTP status codes.
  # @option opts [Float] :webhook_id Filter results by Webhook.
  # @option opts [Float] :application_id Filter results by Application ID.
  # @option opts [Float] :campaign_id Filter results by campaign.
  # @option opts [String] :request_uuid Filter results by request UUID.
  # @option opts [DateTime] :created_before Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally.
  # @option opts [DateTime] :created_after Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally.
  # @return [InlineResponse20034]
  describe 'get_webhook_logs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_webhooks
  # List webhooks
  # List all webhooks.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :application_ids Filter by one or more application IDs separated by a comma.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @return [InlineResponse20032]
  describe 'get_webhooks test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for import_account_collection
  # Import data in existing account-level collection
  # Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
  # @param collection_id The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :up_file The file with the information about the data that should be imported.
  # @return [Import]
  describe 'import_account_collection test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for import_allowed_list
  # Import allowed values for attribute
  # Upload a CSV file containing a list of [picklist values](https://docs.talon.one/docs/product/account/dev-tools/managing-attributes#picklist-values) for the specified attribute.  The file should be sent as multipart data.  The import **replaces** the previous list of allowed values for this attribute, if any.  The CSV file **must** only contain the following column: - &#x60;item&#x60; (required): the values in your allowed list, for example a list of SKU&#39;s.  An allowed list is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60;text item CS-VG-04032021-UP-50D-10 CS-DV-04042021-UP-49D-12 CS-DG-02082021-UP-50G-07 &#x60;&#x60;&#x60; 
  # @param attribute_id The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :up_file The file with the information about the data that should be imported.
  # @return [Import]
  describe 'import_allowed_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for import_collection
  # Import data in existing collection
  # Upload a CSV file containing the collection of string values that should be attached as payload for collection. The file should be sent as multipart data.  The import **replaces** the initial content of the collection.  The CSV file **must** only contain the following column:  - &#x60;item&#x60;: the values in your collection.  A collection is limited to 500,000 items.  Example:  &#x60;&#x60;&#x60; item Addidas Nike Asics &#x60;&#x60;&#x60;  **Note:** Before sending a request to this endpoint, ensure the data in the CSV to import is different from the data currently stored in the collection. 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param campaign_id The ID of the campaign. It is displayed in your Talon.One deployment URL.
  # @param collection_id The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :up_file The file with the information about the data that should be imported.
  # @return [Import]
  describe 'import_collection test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for import_coupons
  # Import coupons
  # Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;value&#x60; (required): The coupon code. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;recipientintegrationid&#x60;: The integration ID of the customer who receives the coupon.   Only the customer with this integration ID can redeem the corresponding coupon code.   Learn about [coupon reservation](https://docs.talon.one/docs/product/rules/effects/using-effects#reserving-a-coupon-code). - &#x60;limitval&#x60;: The maximum number of redemptions of this code. For unlimited redemptions, use &#x60;0&#x60;. Defaults to &#x60;1&#x60; when not provided. - &#x60;discountlimit&#x60;: The total discount value that the code can give. This is typically used to represent a gift card value. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a [custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated to the coupon entity, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text \&quot;value\&quot;,\&quot;expirydate\&quot;,\&quot;startdate\&quot;,\&quot;recipientintegrationid\&quot;,\&quot;limitval\&quot;,\&quot;attributes\&quot;,\&quot;discountlimit\&quot; COUP1,2018-07-01T04:00:00Z,2018-05-01T04:00:00Z,cust123,1,\&quot;{\&quot;\&quot;Category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;,2.4 &#x60;&#x60;&#x60;  Once imported, you can find the &#x60;batchId&#x60; in the Campaign Manager or by using [List coupons](#tag/Coupons/operation/getCouponsWithoutTotalCount). 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param campaign_id The ID of the campaign. It is displayed in your Talon.One deployment URL.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :up_file The file with the information about the data that should be imported.
  # @return [Import]
  describe 'import_coupons test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for import_loyalty_cards
  # Import loyalty cards
  # Upload a CSV file containing the loyalty cards that you want to use in your card-based loyalty program. Send the file as multipart data.  It contains the following columns for each card:  - &#x60;identifier&#x60; (required): The alphanumeric identifier of the loyalty card. - &#x60;state&#x60; (required): The state of the loyalty card. It can be &#x60;active&#x60; or &#x60;inactive&#x60;. - &#x60;customerprofileids&#x60; (optional): An array of strings representing the identifiers of the customer profiles linked to the loyalty card.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;csv identifier,state,customerprofileids 123-456-789AT,active,Alexa001;UserA &#x60;&#x60;&#x60; 
  # @param loyalty_program_id Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :up_file The file with the information about the data that should be imported.
  # @return [Import]
  describe 'import_loyalty_cards test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for import_loyalty_points
  # Import loyalty points
  # Upload a CSV file containing the loyalty points you want to import into a given loyalty program. Send the file as multipart data.  Depending on the loyalty program type, you can import the points into a given customer profile or into a given _active_ loyalty card.  The CSV file contains the following columns:  - &#x60;customerprofileid&#x60; (optional): For profile-based loyalty programs, the integration ID of the customer profile where the loyalty points are imported. - &#x60;identifier&#x60; (optional): For card-based loyalty programs, the identifier of the loyalty card where the loyalty points are imported. - &#x60;amount&#x60;: The amount of points to award to the customer profile. - &#x60;startdate&#x60;: The earliest date when the points can be redeemed. On this date and until the expiration date, the points are &#x60;active&#x60;. - &#x60;expirydate&#x60;: The latest date when the points can be redeemed. After this date, the points are &#x60;expired&#x60;. - &#x60;subledgerid&#x60; (optional): The ID of the subledger that should received the points. - &#x60;reason&#x60; (optional): The reason why these points are awarded.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** For existing customer profiles and loyalty cards, the imported points are added to any previous active or pending points, depending on the value provided for &#x60;startdate&#x60;. If &#x60;startdate&#x60; matches the current date, the imported points are _active_. If it is later, the points are _pending_ until the date provided for &#x60;startdate&#x60; is reached.  **Note:** We recommend limiting your file size to 500MB.  **Example for profile-based programs:**  &#x60;&#x60;&#x60;text customerprofileid,amount,startdate,expirydate,subledgerid,reason URNGV8294NV,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60;  **Example for card-based programs:**  &#x60;&#x60;&#x60;text identifier,amount,startdate,expirydate,subledgerid,reason summer-loyalty-card-0543,100,2009-11-10T23:00:00Z,2009-11-11T23:00:00Z,subledger1,appeasement &#x60;&#x60;&#x60; 
  # @param loyalty_program_id Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :up_file The file with the information about the data that should be imported.
  # @return [Import]
  describe 'import_loyalty_points test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for import_pool_giveaways
  # Import giveaway codes into a giveaway pool
  # Upload a CSV file containing the giveaway codes that should be created. Send the file as multipart data.  The CSV file contains the following columns: - &#x60;code&#x60; (required): the code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  the start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: the last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A json object describing _custom_ giveaway attribute names and their values. Double the double-quotes in the object.   For example, if you [created a custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;provider&#x60; associated to the giveaway entity, set it with &#x60;\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;myPartnerCompany\&quot;\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,enddate,attributes GIVEAWAY1,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY2,2020-11-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Amazon\&quot;\&quot;}\&quot; GIVEAWAY3,2021-01-10T23:00:00Z,2022-11-11T23:00:00Z,\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;Aliexpress\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
  # @param pool_id The ID of the pool. You can find it in the Campaign Manager, in the **Giveaways** section.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :up_file The file with the information about the data that should be imported.
  # @return [Import]
  describe 'import_pool_giveaways test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for import_referrals
  # Import referrals
  # Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file contains the following columns:  - &#x60;code&#x60; (required): The referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: The start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: The end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum number of redemptions of this code. Defaults to &#x60;1&#x60; when left blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.    For example, if you [created a custom attribute](https://docs.talon.one/docs/dev/concepts/attributes#custom-attributes)   called &#x60;category&#x60; associated to the referral entity, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the time zone of your choice. It is converted to UTC internally by Talon.One.  **Note:** We recommend limiting your file size to 500MB.  **Example:**  &#x60;&#x60;&#x60;text code,startdate,expirydate,advocateprofileintegrationid,limitval,attributes REFERRAL_CODE1,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid_4,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot; REFERRAL_CODE2,2020-11-10T23:00:00Z,2021-11-11T23:00:00Z,integid1,1,\&quot;{\&quot;\&quot;my_attribute\&quot;\&quot;: \&quot;\&quot;20_off\&quot;\&quot;}\&quot; &#x60;&#x60;&#x60; 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param campaign_id The ID of the campaign. It is displayed in your Talon.One deployment URL.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :up_file The file with the information about the data that should be imported.
  # @return [Import]
  describe 'import_referrals test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_account_collections
  # List collections in account
  # List collections in account.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @option opts [Boolean] :with_total_result_size When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query. 
  # @option opts [String] :name Filter by the name of the Collection.
  # @return [InlineResponse20014]
  describe 'list_account_collections test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_collections
  # List collections
  # List collections in the campaign.
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param campaign_id The ID of the campaign. It is displayed in your Talon.One deployment URL.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @option opts [Boolean] :with_total_result_size When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query. 
  # @option opts [String] :name Filter by the name of the Collection.
  # @return [InlineResponse20016]
  describe 'list_collections test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_collections_in_application
  # List collections in application
  # List collections from all campaigns in the Application.
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @option opts [Boolean] :with_total_result_size When this flag is set, the result includes the total size of the result, across all pages. This might decrease performance on large data sets.  - When &#x60;true&#x60;: &#x60;hasMore&#x60; is true when there is a next page. &#x60;totalResultSize&#x60; is always zero. - When &#x60;false&#x60;: &#x60;hasMore&#x60; is always false. &#x60;totalResultSize&#x60; contains the total number of results for this query. 
  # @option opts [String] :name Filter by the name of the Collection.
  # @return [InlineResponse20016]
  describe 'list_collections_in_application test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_added_deducted_points_notification
  # Create notification about added or deducted loyalty points
  # Create a notification about added or deducted loyalty points in a given profile-based loyalty program. A notification for added or deducted loyalty points is different from regular webhooks in that it is loyalty program-scoped and has a predefined payload.  For more information, see [Managing notifications](https://docs.talon.one/docs/product/loyalty-programs/managing-notifications). 
  # @param loyalty_program_id Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
  # @param body body
  # @param [Hash] opts the optional parameters
  # @return [BaseNotification]
  describe 'post_added_deducted_points_notification test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_catalogs_strikethrough_notification
  # Create strikethrough notification
  # Create a notification for the in the given Application. For more information, see [Managing notifications](https://docs.talon.one/docs/product/applications/outbound-notifications).  See the [payload](https://docs.talon.one/outbound-notifications) you will receive. 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param body body
  # @param [Hash] opts the optional parameters
  # @return [BaseNotification]
  describe 'post_catalogs_strikethrough_notification test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_loyalty_points
  # Deduct points from customer profile
  # Deduct points from the specified loyalty program and specified customer profile.  To get the &#x60;integrationId&#x60; of the profile from a &#x60;sessionId&#x60;, use the [Update customer session](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint. 
  # @param loyalty_program_id The identifier for the loyalty program.
  # @param integration_id The identifier of the profile.
  # @param body body
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'remove_loyalty_points test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reset_password
  # Reset password
  # Consumes the supplied password reset token and updates the password for the associated account. 
  # @param body body
  # @param [Hash] opts the optional parameters
  # @return [NewPassword]
  describe 'reset_password test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_coupons_advanced_application_wide_without_total_count
  # List coupons that match the given attributes (without total count)
  # List the coupons whose attributes match the query criteria in all **active** campaigns of the given Application.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param body body
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @option opts [String] :value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
  # @option opts [DateTime] :created_before Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
  # @option opts [DateTime] :created_after Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
  # @option opts [String] :valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future. 
  # @option opts [String] :usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
  # @option opts [Integer] :referral_id Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code.
  # @option opts [String] :recipient_integration_id Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field
  # @option opts [String] :batch_id Filter results by batches of coupons
  # @option opts [Boolean] :exact_match Filter results to an exact case-insensitive matching against the coupon code
  # @option opts [String] :campaign_state Filter results by the state of the campaign.  - &#x60;enabled&#x60;: Campaigns that are scheduled, running (activated), or expired. - &#x60;running&#x60;: Campaigns that are running (activated). - &#x60;disabled&#x60;: Campaigns that are disabled. - &#x60;expired&#x60;: Campaigns that are expired. - &#x60;archived&#x60;: Campaigns that are archived. - &#x60;draft&#x60;: Campaigns that are drafts. 
  # @return [InlineResponse2007]
  describe 'search_coupons_advanced_application_wide_without_total_count test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_coupons_advanced_without_total_count
  # List coupons that match the given attributes in campaign (without total count)
  # List the coupons whose attributes match the query criteria in the given campaign.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request.  **Note:** The total count is not included in the response. 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param campaign_id The ID of the campaign. It is displayed in your Talon.One deployment URL.
  # @param body body
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items in this response.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. By default, results are sorted in ascending order. To sort them in descending order, prefix the field name with &#x60;-&#x60;.  **Note:** This parameter works only with numeric fields. 
  # @option opts [String] :value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
  # @option opts [DateTime] :created_before Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
  # @option opts [DateTime] :created_after Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally.
  # @option opts [String] :valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiration date is set and in the past. The second matches coupons in which start date is null or in the past and expiration date is null or in the future, the third matches coupons in which start date is set and in the future. 
  # @option opts [String] :usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
  # @option opts [Integer] :referral_id Filter the results by matching them with the ID of a referral. This filter shows the coupons created by redeeming a referral code.
  # @option opts [String] :recipient_integration_id Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field
  # @option opts [Boolean] :exact_match Filter results to an exact case-insensitive matching against the coupon code
  # @option opts [String] :batch_id Filter results by batches of coupons
  # @return [InlineResponse2007]
  describe 'search_coupons_advanced_without_total_count test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for transfer_loyalty_card
  # Transfer loyalty card data
  # Transfer card data, such as linked customers, loyalty balances and transactions, from a given loyalty card to a new, automatically created loyalty card.  **Important:**  - The original card is automatically blocked once the new card is created, and it cannot be activated again. - The default status of the new card is _active_. 
  # @param loyalty_program_id Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
  # @param loyalty_card_identifier Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. 
  # @param body body
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'transfer_loyalty_card test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_account_collection
  # Update account-level collection
  # Edit the description of the account-level collection and enable or disable the collection in the specified Applications.
  # @param collection_id The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
  # @param body body
  # @param [Hash] opts the optional parameters
  # @return [Collection]
  describe 'update_account_collection test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_additional_cost
  # Update additional cost
  # Updates an existing additional cost. Once created, the only property of an additional cost that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. 
  # @param additional_cost_id The ID of the additional cost. You can find the ID the the Campaign Manager&#39;s URL when you display the details of the cost in **Account** &gt; **Tools** &gt; **Additional costs**. 
  # @param body body
  # @param [Hash] opts the optional parameters
  # @return [AccountAdditionalCost]
  describe 'update_additional_cost test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_attribute
  # Update custom attribute
  # Update an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the description.  To change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. 
  # @param attribute_id The ID of the attribute. You can find the ID in the Campaign Manager&#39;s URL when you display the details of an attribute in **Account** &gt; **Tools** &gt; **Attributes**.
  # @param body body
  # @param [Hash] opts the optional parameters
  # @return [Attribute]
  describe 'update_attribute test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_campaign
  # Update campaign
  # Update the given campaign.
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param campaign_id The ID of the campaign. It is displayed in your Talon.One deployment URL.
  # @param body body
  # @param [Hash] opts the optional parameters
  # @return [Campaign]
  describe 'update_campaign test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_collection
  # Update collection description
  # Edit the description of the collection.
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param campaign_id The ID of the campaign. It is displayed in your Talon.One deployment URL.
  # @param collection_id The ID of the collection. You can get it with the [List collection in account](#operation/listCollectionsInApplication) endpoint.
  # @param body body
  # @param [Hash] opts the optional parameters
  # @return [Collection]
  describe 'update_collection test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_coupon
  # Update coupon
  # Update the specified coupon.  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;p&gt;With this PUT endpoint only, any property you do not explicitly set in your request   will be set to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;  &lt;/div&gt; 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param campaign_id The ID of the campaign. It is displayed in your Talon.One deployment URL.
  # @param coupon_id The internal ID of the coupon code. You can find this value in the &#x60;id&#x60; property from the [List coupons](https://docs.talon.one/management-api#tag/Coupons/operation/getCouponsWithoutTotalCount) endpoint response. 
  # @param body body
  # @param [Hash] opts the optional parameters
  # @return [Coupon]
  describe 'update_coupon test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_coupon_batch
  # Update coupons
  # Update all coupons, or a specific batch of coupons, in a campaign. You can find the &#x60;batchId&#x60; in the **Coupons** view of your Application in the Campaign Manager, or you can use [List coupons](#operation/getCouponsWithoutTotalCount).  &lt;div class&#x3D;\&quot;redoc-section\&quot;&gt;   &lt;p class&#x3D;\&quot;title\&quot;&gt;Important&lt;/p&gt;    &lt;ul&gt;     &lt;li&gt;Only send sequential requests to this endpoint.&lt;/li&gt;     &lt;li&gt;Requests to this endpoint timeout after 30 minutes. If you hit a timeout, reach out to our support team.&lt;/li&gt;   &lt;/ul&gt;  &lt;/div&gt;  To update a specific coupon, use [Update coupon](#operation/updateCoupon). 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param campaign_id The ID of the campaign. It is displayed in your Talon.One deployment URL.
  # @param body body
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'update_coupon_batch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_loyalty_card
  # Update loyalty card status
  # Update the status of the given loyalty card. A card can be _active_ or _inactive_.
  # @param loyalty_program_id Identifier of the card-based loyalty program containing the loyalty card. You can get the ID with the [List loyalty programs](https://docs.talon.one/management-api#tag/Loyalty/operation/getLoyaltyPrograms) endpoint. 
  # @param loyalty_card_identifier Identifier of the loyalty card. You can get the identifier with the [List loyalty cards](https://docs.talon.one/management-api#tag/Loyalty-cards/operation/getLoyaltyCards) endpoint. 
  # @param body body
  # @param [Hash] opts the optional parameters
  # @return [LoyaltyCard]
  describe 'update_loyalty_card test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_notification_webhook
  # Update notification about campaign-related changes
  # Update the given [notification about campaign-related changes](https://docs.talon.one/docs/product/applications/outbound-notifications).  **Tip:** You can review the payload you will receive in the [specs](https://docs.talon.one/outbound-notifications#/paths/campaign_edited/post). 
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param notification_webhook_id The ID of the webhook. Get it with the appropriate _List notifications_ endpoint.
  # @param body body
  # @param [Hash] opts the optional parameters
  # @return [NotificationWebhook]
  describe 'update_notification_webhook test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_referral
  # Update referral
  # Update the specified referral.
  # @param application_id The ID of the Application. It is displayed in your Talon.One deployment URL.
  # @param campaign_id The ID of the campaign. It is displayed in your Talon.One deployment URL.
  # @param referral_id The ID of the referral code.
  # @param body body
  # @param [Hash] opts the optional parameters
  # @return [Referral]
  describe 'update_referral test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
