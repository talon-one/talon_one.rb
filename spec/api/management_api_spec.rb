=begin
#Talon.One API

#The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'spec_helper'
require 'json'

# Unit tests for TalonOne::ManagementApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ManagementApi' do
  before do
    # run before each test
    @instance = TalonOne::ManagementApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ManagementApi' do
    it 'should create an instance of ManagementApi' do
      expect(@instance).to be_instance_of(TalonOne::ManagementApi)
    end
  end

  # unit tests for add_loyalty_points
  # Add points in a certain loyalty program for the specified customer
  # 
  # @param program_id 
  # @param integration_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'add_loyalty_points test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for copy_campaign_to_applications
  # Copy the campaign into every specified application
  # Copy the campaign into every specified application.
  # @param application_id 
  # @param campaign_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2003]
  describe 'copy_campaign_to_applications test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_campaign
  # Create a Campaign
  # 
  # @param application_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [Campaign]
  describe 'create_campaign test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_coupons
  # Create Coupons
  # Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupns can be created.
  # @param application_id 
  # @param campaign_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :silent If set to &#39;yes&#39;, response will be an empty 204, otherwise a list of the coupons generated (to to 1000).
  # @return [InlineResponse2001]
  describe 'create_coupons test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_password_recovery_email
  # Request a password reset
  # Sends an email with a password recovery link to the email of an existing account. 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [NewPasswordEmail]
  describe 'create_password_recovery_email test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_ruleset
  # Create a Ruleset
  # 
  # @param application_id 
  # @param campaign_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [Ruleset]
  describe 'create_ruleset test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_session
  # Create a Session
  # 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [Session]
  describe 'create_session test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_campaign
  # Delete a Campaign
  # 
  # @param application_id 
  # @param campaign_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_campaign test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_coupon
  # Delete one Coupon
  # 
  # @param application_id 
  # @param campaign_id 
  # @param coupon_id The ID of the coupon code to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_coupon test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_coupons
  # Delete Coupons
  # 
  # @param application_id 
  # @param campaign_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
  # @option opts [DateTime] :created_before Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
  # @option opts [DateTime] :created_after Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
  # @option opts [DateTime] :starts_after Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
  # @option opts [DateTime] :starts_before Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
  # @option opts [DateTime] :expires_after Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
  # @option opts [DateTime] :expires_before Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
  # @option opts [String] :valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future. 
  # @option opts [String] :batch_id Filter results by batches of coupons
  # @option opts [String] :usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
  # @option opts [Integer] :referral_id Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code.
  # @option opts [String] :recipient_integration_id Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field
  # @option opts [BOOLEAN] :exact_match Filter results to an exact case-insensitive matching against the coupon code
  # @return [nil]
  describe 'delete_coupons test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_referral
  # Delete one Referral
  # 
  # @param application_id 
  # @param campaign_id 
  # @param referral_id The ID of the referral code to delete
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_referral test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_ruleset
  # Delete a Ruleset
  # 
  # @param application_id 
  # @param campaign_id 
  # @param ruleset_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_ruleset test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_access_logs
  # Get access logs for application
  # 
  # @param application_id 
  # @param range_start Only return results from after this timestamp, must be an RFC3339 timestamp string
  # @param range_end Only return results from before this timestamp, must be an RFC3339 timestamp string
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Only return results where the request path matches the given regular expresssion.
  # @option opts [String] :method Only return results where the request method matches the given regular expresssion.
  # @option opts [String] :status Filter results by HTTP status codes.
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
  # @return [InlineResponse2009]
  describe 'get_access_logs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_access_logs_without_total_count
  # Get access logs for application
  # 
  # @param application_id 
  # @param range_start Only return results from after this timestamp, must be an RFC3339 timestamp string
  # @param range_end Only return results from before this timestamp, must be an RFC3339 timestamp string
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Only return results where the request path matches the given regular expresssion.
  # @option opts [String] :method Only return results where the request method matches the given regular expresssion.
  # @option opts [String] :status Filter results by HTTP status codes.
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
  # @return [InlineResponse20010]
  describe 'get_access_logs_without_total_count test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account
  # Get Account Details
  # Return the details of your companies Talon.One account. 
  # @param account_id 
  # @param [Hash] opts the optional parameters
  # @return [Account]
  describe 'get_account test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_analytics
  # Get Account Analytics
  # Return the analytics of your companies Talon.One account. 
  # @param account_id 
  # @param [Hash] opts the optional parameters
  # @return [AccountAnalytics]
  describe 'get_account_analytics test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_limits
  # Get Account Limits
  # Returns a list of all account limits set 
  # @param account_id 
  # @param [Hash] opts the optional parameters
  # @return [AccountLimits]
  describe 'get_account_limits test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_access_logs
  # Get all access logs
  # Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
  # @param range_start Only return results from after this timestamp, must be an RFC3339 timestamp string
  # @param range_end Only return results from before this timestamp, must be an RFC3339 timestamp string
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Only return results where the request path matches the given regular expresssion.
  # @option opts [String] :method Only return results where the request method matches the given regular expresssion.
  # @option opts [String] :status Filter results by HTTP status codes.
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
  # @return [InlineResponse2009]
  describe 'get_all_access_logs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_roles
  # Get all roles.
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20028]
  describe 'get_all_roles test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_application
  # Get Application
  # Get the application specified by the ID.
  # @param application_id 
  # @param [Hash] opts the optional parameters
  # @return [Application]
  describe 'get_application test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_application_api_health
  # Get report of health of application API
  # 
  # @param application_id 
  # @param [Hash] opts the optional parameters
  # @return [ApplicationApiHealth]
  describe 'get_application_api_health test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_application_customer
  # Get Application Customer
  # 
  # @param application_id 
  # @param customer_id 
  # @param [Hash] opts the optional parameters
  # @return [ApplicationCustomer]
  describe 'get_application_customer test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_application_customers
  # List Application Customers
  # 
  # @param application_id 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20012]
  describe 'get_application_customers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_application_customers_by_attributes
  # Get a list of the customer profiles that match the given attributes
  # Gets a list of all the customer profiles for the account that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.  [Customer Profile]: http://help.talon.one/customer/en/portal/articles/2525263-data-model?b_id&#x3D;14115#customer-profile 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse20013]
  describe 'get_application_customers_by_attributes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_application_event_types
  # List Applications Event Types
  # Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](/integration-api/reference/#trackEvent) 
  # @param application_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
  # @return [InlineResponse20019]
  describe 'get_application_event_types test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_application_events
  # List Applications Events
  # Lists all events recorded for an application. 
  # @param application_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
  # @option opts [String] :type Comma-separated list of types by which to filter events. Must be exact match(es).
  # @option opts [DateTime] :created_before Only return events created before this date
  # @option opts [DateTime] :created_after Only return events created after this date
  # @option opts [String] :session Session integration ID filter for events. Must be exact match.
  # @option opts [String] :profile Profile integration ID filter for events. Must be exact match.
  # @option opts [String] :customer_name Customer name filter for events. Will match substrings case-insensitively.
  # @option opts [String] :customer_email Customer e-mail address filter for events. Will match substrings case-insensitively.
  # @option opts [String] :effects_query Effects filter for events. Will perform a full-text search on the text content of the events effects, if any.
  # @option opts [String] :attributes_query Attributes filter for events. Will perform a full-text search on the text content of the events attributes, both keys and values.
  # @option opts [String] :rule_query Rule name filter for events
  # @option opts [String] :campaign_query Campaign name filter for events
  # @return [InlineResponse20017]
  describe 'get_application_events test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_application_events_without_total_count
  # List Applications Events
  # Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only if there are more results. 
  # @param application_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
  # @option opts [String] :type Comma-separated list of types by which to filter events. Must be exact match(es).
  # @option opts [DateTime] :created_before Only return events created before this date
  # @option opts [DateTime] :created_after Only return events created after this date
  # @option opts [String] :session Session integration ID filter for events. Must be exact match.
  # @option opts [String] :profile Profile integration ID filter for events. Must be exact match.
  # @option opts [String] :customer_name Customer name filter for events. Will match substrings case-insensitively.
  # @option opts [String] :customer_email Customer e-mail address filter for events. Will match substrings case-insensitively.
  # @option opts [String] :effects_query Effects filter for events. Will perform a full-text search on the text content of the events effects, if any.
  # @option opts [String] :attributes_query Attributes filter for events. Will perform a full-text search on the text content of the events attributes, both keys and values.
  # @option opts [String] :rule_query Rule name filter for events
  # @option opts [String] :campaign_query Campaign name filter for events
  # @return [InlineResponse20018]
  describe 'get_application_events_without_total_count test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_application_session
  # Get Application Session
  # 
  # @param application_id 
  # @param session_id 
  # @param [Hash] opts the optional parameters
  # @return [ApplicationSession]
  describe 'get_application_session test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_application_sessions
  # List Application Sessions
  # 
  # @param application_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
  # @option opts [String] :profile Profile integration ID filter for sessions. Must be exact match.
  # @option opts [String] :state Filter by sessions with this state. Must be exact match.
  # @option opts [String] :coupon Filter by sessions with this coupon. Must be exact match.
  # @return [InlineResponse20016]
  describe 'get_application_sessions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_applications
  # List Applications
  # List all application in the current account.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
  # @return [InlineResponse2002]
  describe 'get_applications test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_attribute
  # Get a custom attribute
  # Returns custom attribute for the account by its id. 
  # @param attribute_id 
  # @param [Hash] opts the optional parameters
  # @return [Attribute]
  describe 'get_attribute test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_campaign
  # Get a Campaign
  # 
  # @param application_id 
  # @param campaign_id 
  # @param [Hash] opts the optional parameters
  # @return [Campaign]
  describe 'get_campaign test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_campaign_analytics
  # Get analytics of campaigns
  # 
  # @param application_id 
  # @param campaign_id 
  # @param range_start Only return results from after this timestamp, must be an RFC3339 timestamp string
  # @param range_end Only return results from before this timestamp, must be an RFC3339 timestamp string
  # @param [Hash] opts the optional parameters
  # @option opts [String] :granularity The time interval between the results in the returned time-series.
  # @return [InlineResponse20011]
  describe 'get_campaign_analytics test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_campaign_by_attributes
  # Get a list of all campaigns that match the given attributes
  # Gets a list of all the campaigns that exactly match a set of attributes. 
  # @param application_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
  # @option opts [String] :campaign_state Filter results by the state of the campaign.
  # @return [InlineResponse2003]
  describe 'get_campaign_by_attributes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_campaign_set
  # List CampaignSet
  # 
  # @param application_id 
  # @param [Hash] opts the optional parameters
  # @return [CampaignSet]
  describe 'get_campaign_set test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_campaigns
  # List your Campaigns
  # 
  # @param application_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
  # @option opts [String] :campaign_state Filter results by the state of the campaign.
  # @option opts [String] :name Filter results performing case-insensitive matching against the name of the campaign.
  # @option opts [String] :tags Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values 
  # @option opts [DateTime] :created_before Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp.
  # @option opts [DateTime] :created_after Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp.
  # @return [InlineResponse2003]
  describe 'get_campaigns test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_changes
  # Get audit log for an account
  # Get list of changes caused by API calls for an account. Only accessible for admins.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
  # @return [InlineResponse20025]
  describe 'get_changes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_coupons
  # List Coupons
  # 
  # @param application_id 
  # @param campaign_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
  # @option opts [String] :value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
  # @option opts [DateTime] :created_before Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
  # @option opts [DateTime] :created_after Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
  # @option opts [DateTime] :starts_after Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
  # @option opts [DateTime] :starts_before Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
  # @option opts [DateTime] :expires_after Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
  # @option opts [DateTime] :expires_before Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
  # @option opts [String] :valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future. 
  # @option opts [String] :batch_id Filter results by batches of coupons
  # @option opts [String] :usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
  # @option opts [Integer] :referral_id Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code.
  # @option opts [String] :recipient_integration_id Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field
  # @option opts [BOOLEAN] :exact_match Filter results to an exact case-insensitive matching against the coupon code
  # @return [InlineResponse2001]
  describe 'get_coupons test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_coupons_by_attributes
  # Get a list of the coupons that match the given attributes
  # Gets a list of all the coupons that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request. 
  # @param application_id 
  # @param campaign_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
  # @option opts [String] :value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
  # @option opts [DateTime] :created_before Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
  # @option opts [DateTime] :created_after Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
  # @option opts [String] :valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future. 
  # @option opts [String] :usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
  # @option opts [Integer] :referral_id Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code.
  # @option opts [String] :recipient_integration_id Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field
  # @option opts [BOOLEAN] :exact_match Filter results to an exact case-insensitive matching against the coupon code
  # @option opts [String] :batch_id Filter results by batches of coupons
  # @return [InlineResponse2001]
  describe 'get_coupons_by_attributes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_coupons_by_attributes_application_wide
  # Get a list of the coupons that match the given attributes in all active campaigns of an application
  # Gets a list of all the coupons with attributes matching the query criteria Application wide 
  # @param application_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
  # @option opts [String] :value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
  # @option opts [DateTime] :created_before Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
  # @option opts [DateTime] :created_after Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
  # @option opts [String] :valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future. 
  # @option opts [String] :usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
  # @option opts [Integer] :referral_id Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code.
  # @option opts [String] :recipient_integration_id Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field
  # @option opts [String] :batch_id Filter results by batches of coupons
  # @option opts [BOOLEAN] :exact_match Filter results to an exact case-insensitive matching against the coupon code
  # @option opts [String] :campaign_state Filter results by the state of the campaign.
  # @return [InlineResponse2001]
  describe 'get_coupons_by_attributes_application_wide test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_coupons_without_total_count
  # List Coupons
  # 
  # @param application_id 
  # @param campaign_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
  # @option opts [String] :value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
  # @option opts [DateTime] :created_before Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
  # @option opts [DateTime] :created_after Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
  # @option opts [String] :valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future. 
  # @option opts [String] :usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
  # @option opts [Integer] :referral_id Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code.
  # @option opts [String] :recipient_integration_id Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field
  # @option opts [String] :batch_id Filter results by batches of coupons
  # @option opts [BOOLEAN] :exact_match Filter results to an exact case-insensitive matching against the coupon code
  # @return [InlineResponse2005]
  describe 'get_coupons_without_total_count test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_customer_activity_report
  # Get Activity Report for Single Customer
  # Fetch summary report for single application customer based on a time range
  # @param range_start Only return results from after this timestamp, must be an RFC3339 timestamp string
  # @param range_end Only return results from before this timestamp, must be an RFC3339 timestamp string
  # @param application_id 
  # @param customer_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @return [CustomerActivityReport]
  describe 'get_customer_activity_report test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_customer_activity_reports
  # Get Activity Reports for Application Customers
  # Fetch summary reports for all application customers based on a time range
  # @param range_start Only return results from after this timestamp, must be an RFC3339 timestamp string
  # @param range_end Only return results from before this timestamp, must be an RFC3339 timestamp string
  # @param application_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
  # @option opts [String] :name Only return reports matching the customer name
  # @option opts [String] :integration_id Only return reports matching the integrationId
  # @option opts [String] :campaign_name Only return reports matching the campaignName
  # @option opts [String] :advocate_name Only return reports matching the current customer referrer name
  # @return [InlineResponse20014]
  describe 'get_customer_activity_reports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_customer_activity_reports_without_total_count
  # Get Activity Reports for Application Customers
  # Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only if there are more results.
  # @param range_start Only return results from after this timestamp, must be an RFC3339 timestamp string
  # @param range_end Only return results from before this timestamp, must be an RFC3339 timestamp string
  # @param application_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
  # @option opts [String] :name Only return reports matching the customer name
  # @option opts [String] :integration_id Only return reports matching the integrationId
  # @option opts [String] :campaign_name Only return reports matching the campaignName
  # @option opts [String] :advocate_name Only return reports matching the current customer referrer name
  # @return [InlineResponse20015]
  describe 'get_customer_activity_reports_without_total_count test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_customer_analytics
  # Get Analytics Report for a Customer
  # Fetch analytics for single application customer
  # @param application_id 
  # @param customer_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
  # @return [CustomerAnalytics]
  describe 'get_customer_analytics test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_customer_profile
  # Get Customer Profile
  # 
  # @param application_id 
  # @param customer_id 
  # @param [Hash] opts the optional parameters
  # @return [ApplicationCustomer]
  describe 'get_customer_profile test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_customer_profiles
  # List Customer Profiles
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @return [InlineResponse20013]
  describe 'get_customer_profiles test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_customers_by_attributes
  # Get a list of the customer profiles that match the given attributes
  # Gets a list of all the customer profiles for the account that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.  [Customer Profile]: http://help.talon.one/customer/en/portal/articles/2525263-data-model?b_id&#x3D;14115#customer-profile 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @return [InlineResponse20013]
  describe 'get_customers_by_attributes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_event_types
  # List Event Types
  # Fetch all event type definitions for your account. Each event type can be 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :application_ids Filter by one or more application ids separated by comma
  # @option opts [String] :name Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;.
  # @option opts [BOOLEAN] :include_old_versions Include all versions of every event type.
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
  # @return [InlineResponse20023]
  describe 'get_event_types test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_exports
  # Get Exports
  # Get a list of all past exports 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [Integer] :application_id 
  # @option opts [Integer] :campaign_id 
  # @option opts [String] :entity The name of the entity type that was exported.
  # @return [InlineResponse20026]
  describe 'get_exports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_imports
  # Get Imports
  # Get a list of all past imports 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @return [InlineResponse20027]
  describe 'get_imports test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_loyalty_points
  # get the Loyalty Ledger for this integrationID
  # Get the Loyalty Ledger for this profile integration ID.
  # @param program_id The identifier for the application, must be unique within the account.
  # @param integration_id The identifier for the application, must be unique within the account.
  # @param [Hash] opts the optional parameters
  # @return [LoyaltyLedger]
  describe 'get_loyalty_points test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_loyalty_program
  # Get a loyalty program
  # 
  # @param program_id 
  # @param [Hash] opts the optional parameters
  # @return [LoyaltyProgram]
  describe 'get_loyalty_program test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_loyalty_programs
  # List all loyalty Programs
  # 
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2008]
  describe 'get_loyalty_programs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_referrals
  # List Referrals
  # 
  # @param application_id 
  # @param campaign_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
  # @option opts [String] :code Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters.
  # @option opts [DateTime] :created_before Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp.
  # @option opts [DateTime] :created_after Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp.
  # @option opts [String] :valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future. 
  # @option opts [String] :usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
  # @option opts [String] :advocate Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field
  # @return [InlineResponse2006]
  describe 'get_referrals test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_referrals_without_total_count
  # List Referrals
  # 
  # @param application_id 
  # @param campaign_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
  # @option opts [String] :code Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters.
  # @option opts [DateTime] :created_before Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp.
  # @option opts [DateTime] :created_after Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp.
  # @option opts [String] :valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future. 
  # @option opts [String] :usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
  # @option opts [String] :advocate Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field
  # @return [InlineResponse2007]
  describe 'get_referrals_without_total_count test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_role
  # Get information for the specified role.
  # @param role_id 
  # @param [Hash] opts the optional parameters
  # @return [Role]
  describe 'get_role test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_ruleset
  # Get a Ruleset
  # 
  # @param application_id 
  # @param campaign_id 
  # @param ruleset_id 
  # @param [Hash] opts the optional parameters
  # @return [Ruleset]
  describe 'get_ruleset test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_rulesets
  # List Campaign Rulesets
  # 
  # @param application_id 
  # @param campaign_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
  # @return [InlineResponse2004]
  describe 'get_rulesets test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user
  # Get a single User
  # Retrieves the data (including an invitation code) for a user. Non-admin users can only get themselves. 
  # @param user_id 
  # @param [Hash] opts the optional parameters
  # @return [User]
  describe 'get_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_users
  # List Users in your account
  # Retrieve all users in your account. 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
  # @return [InlineResponse20024]
  describe 'get_users test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_webhook
  # Get Webhook
  # Returns an webhook by its id.
  # @param webhook_id 
  # @param [Hash] opts the optional parameters
  # @return [Webhook]
  describe 'get_webhook test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_webhook_activation_logs
  # List Webhook activation Log Entries
  # Webhook activation log entries would be created as soon as an integration request triggered an effect with a webhook
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
  # @option opts [String] :integration_request_uuid Filter results by integration request UUID.
  # @option opts [Float] :webhook_id Filter results by Webhook.
  # @option opts [Float] :application_id 
  # @option opts [Float] :campaign_id Filter results by campaign.
  # @option opts [DateTime] :created_before Only return events created before this date.
  # @option opts [DateTime] :created_after Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string.
  # @return [InlineResponse20021]
  describe 'get_webhook_activation_logs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_webhook_logs
  # List Webhook Log Entries
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
  # @option opts [String] :status Filter results by HTTP status codes.
  # @option opts [Float] :webhook_id Filter results by Webhook.
  # @option opts [Float] :application_id 
  # @option opts [Float] :campaign_id Filter results by campaign.
  # @option opts [String] :request_uuid Filter results by request UUID.
  # @option opts [DateTime] :created_before Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string.
  # @option opts [DateTime] :created_after Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string.
  # @return [InlineResponse20022]
  describe 'get_webhook_logs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_webhooks
  # List Webhooks
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :application_ids Filter by one or more application ids separated by comma
  # @option opts [String] :sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @return [InlineResponse20020]
  describe 'get_webhooks test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for refresh_analytics
  # Trigger refresh on stale analytics.
  # Should be used to trigger a manual refresh of analytics.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'refresh_analytics test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_loyalty_points
  # Deduct points in a certain loyalty program for the specified customer
  # 
  # @param program_id 
  # @param integration_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'remove_loyalty_points test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reset_password
  # Reset password
  # Consumes the supplied password reset token and updates the password for the associated account. 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [NewPassword]
  describe 'reset_password test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_coupons_advanced
  # Get a list of the coupons that match the given attributes
  # Gets a list of all the coupons with attributes matching the query criteria 
  # @param application_id 
  # @param campaign_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
  # @option opts [String] :value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
  # @option opts [DateTime] :created_before Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
  # @option opts [DateTime] :created_after Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
  # @option opts [String] :valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future. 
  # @option opts [String] :usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
  # @option opts [Integer] :referral_id Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code.
  # @option opts [String] :recipient_integration_id Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field
  # @option opts [BOOLEAN] :exact_match Filter results to an exact case-insensitive matching against the coupon code
  # @option opts [String] :batch_id Filter results by batches of coupons
  # @return [InlineResponse2001]
  describe 'search_coupons_advanced test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_coupons_advanced_application_wide
  # Get a list of the coupons that match the given attributes in all active campaigns of an application
  # Gets a list of all the coupons with attributes matching the query criteria in all active campaigns of an application 
  # @param application_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
  # @option opts [String] :value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
  # @option opts [DateTime] :created_before Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
  # @option opts [DateTime] :created_after Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
  # @option opts [String] :valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future. 
  # @option opts [String] :usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
  # @option opts [Integer] :referral_id Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code.
  # @option opts [String] :recipient_integration_id Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field
  # @option opts [String] :batch_id Filter results by batches of coupons
  # @option opts [BOOLEAN] :exact_match Filter results to an exact case-insensitive matching against the coupon code
  # @option opts [String] :campaign_state Filter results by the state of the campaign.
  # @return [InlineResponse2001]
  describe 'search_coupons_advanced_application_wide test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_coupons_advanced_application_wide_without_total_count
  # Get a list of the coupons that match the given attributes in all active campaigns of an application
  # Gets a list of all the coupons with attributes matching the query criteria in all active campaigns of an application 
  # @param application_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
  # @option opts [String] :value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
  # @option opts [DateTime] :created_before Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
  # @option opts [DateTime] :created_after Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
  # @option opts [String] :valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future. 
  # @option opts [String] :usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
  # @option opts [Integer] :referral_id Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code.
  # @option opts [String] :recipient_integration_id Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field
  # @option opts [String] :batch_id Filter results by batches of coupons
  # @option opts [BOOLEAN] :exact_match Filter results to an exact case-insensitive matching against the coupon code
  # @option opts [String] :campaign_state Filter results by the state of the campaign.
  # @return [InlineResponse2005]
  describe 'search_coupons_advanced_application_wide_without_total_count test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for search_coupons_advanced_without_total_count
  # Get a list of the coupons that match the given attributes
  # Gets a list of all the coupons with attributes matching the query criteria 
  # @param application_id 
  # @param campaign_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page_size The number of items to include in this response. When omitted, the maximum value of 1000 will be used.
  # @option opts [Integer] :skip Skips the given number of items when paging through large result sets.
  # @option opts [String] :sort The field by which results should be sorted. Sorting defaults to ascending order, prefix the field name with &#x60;-&#x60; to sort in descending order.
  # @option opts [String] :value Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters.
  # @option opts [DateTime] :created_before Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
  # @option opts [DateTime] :created_after Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp.
  # @option opts [String] :valid Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future. 
  # @option opts [String] :usable Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;. 
  # @option opts [Integer] :referral_id Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code.
  # @option opts [String] :recipient_integration_id Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field
  # @option opts [BOOLEAN] :exact_match Filter results to an exact case-insensitive matching against the coupon code
  # @option opts [String] :batch_id Filter results by batches of coupons
  # @return [InlineResponse2005]
  describe 'search_coupons_advanced_without_total_count test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_account_limits
  # Set account limits
  # sets account limits 
  # @param account_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'set_account_limits test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_campaign
  # Update a Campaign
  # 
  # @param application_id 
  # @param campaign_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [Campaign]
  describe 'update_campaign test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_campaign_set
  # Update a Campaign Set
  # 
  # @param application_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [CampaignSet]
  describe 'update_campaign_set test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_coupon
  # Update a Coupon
  # 
  # @param application_id 
  # @param campaign_id 
  # @param coupon_id The ID of the coupon code to update
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [Coupon]
  describe 'update_coupon test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_coupon_batch
  # Update a Batch of Coupons
  # 
  # @param application_id 
  # @param campaign_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'update_coupon_batch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_ruleset
  # Update a Ruleset
  # 
  # @param application_id 
  # @param campaign_id 
  # @param ruleset_id 
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [Ruleset]
  describe 'update_ruleset test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
