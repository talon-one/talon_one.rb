=begin
#Talon.One API

#Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 

The version of the OpenAPI document: 

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module TalonOne
  class User
    # Internal ID of this entity.
    attr_accessor :id

    # The time this entity was created.
    attr_accessor :created

    # The time this entity was last modified.
    attr_accessor :modified

    # The email address associated with the user profile.
    attr_accessor :email

    # The ID of the account that owns this entity.
    attr_accessor :account_id

    # Name of the user.
    attr_accessor :name

    # State of the user.
    attr_accessor :state

    # Invitation token of the user.  **Note**: If the user has already accepted their invitation, this is `null`. 
    attr_accessor :invite_token

    # Indicates whether the user is an `admin`.
    attr_accessor :is_admin

    # Access level of the user.
    attr_accessor :policy

    # A list of the IDs of the roles assigned to the user.
    attr_accessor :roles

    # Authentication method for this user.
    attr_accessor :auth_method

    # Application notifications that the user is subscribed to.
    attr_accessor :application_notification_subscriptions

    # Timestamp when the user last signed in to Talon.One.
    attr_accessor :last_signed_in

    # Timestamp of the user's last activity after signing in to Talon.One.
    attr_accessor :last_accessed

    # Timestamp when the user was notified for feed.
    attr_accessor :latest_feed_timestamp

    # Additional user attributes, created and used by external identity providers.
    attr_accessor :additional_attributes

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'created' => :'created',
        :'modified' => :'modified',
        :'email' => :'email',
        :'account_id' => :'accountId',
        :'name' => :'name',
        :'state' => :'state',
        :'invite_token' => :'inviteToken',
        :'is_admin' => :'isAdmin',
        :'policy' => :'policy',
        :'roles' => :'roles',
        :'auth_method' => :'authMethod',
        :'application_notification_subscriptions' => :'applicationNotificationSubscriptions',
        :'last_signed_in' => :'lastSignedIn',
        :'last_accessed' => :'lastAccessed',
        :'latest_feed_timestamp' => :'latestFeedTimestamp',
        :'additional_attributes' => :'additionalAttributes'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'created' => :'DateTime',
        :'modified' => :'DateTime',
        :'email' => :'String',
        :'account_id' => :'Integer',
        :'name' => :'String',
        :'state' => :'String',
        :'invite_token' => :'String',
        :'is_admin' => :'Boolean',
        :'policy' => :'Object',
        :'roles' => :'Array<Integer>',
        :'auth_method' => :'String',
        :'application_notification_subscriptions' => :'Object',
        :'last_signed_in' => :'DateTime',
        :'last_accessed' => :'DateTime',
        :'latest_feed_timestamp' => :'DateTime',
        :'additional_attributes' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TalonOne::User` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TalonOne::User`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'modified')
        self.modified = attributes[:'modified']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'account_id')
        self.account_id = attributes[:'account_id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'invite_token')
        self.invite_token = attributes[:'invite_token']
      end

      if attributes.key?(:'is_admin')
        self.is_admin = attributes[:'is_admin']
      end

      if attributes.key?(:'policy')
        self.policy = attributes[:'policy']
      end

      if attributes.key?(:'roles')
        if (value = attributes[:'roles']).is_a?(Array)
          self.roles = value
        end
      end

      if attributes.key?(:'auth_method')
        self.auth_method = attributes[:'auth_method']
      end

      if attributes.key?(:'application_notification_subscriptions')
        self.application_notification_subscriptions = attributes[:'application_notification_subscriptions']
      end

      if attributes.key?(:'last_signed_in')
        self.last_signed_in = attributes[:'last_signed_in']
      end

      if attributes.key?(:'last_accessed')
        self.last_accessed = attributes[:'last_accessed']
      end

      if attributes.key?(:'latest_feed_timestamp')
        self.latest_feed_timestamp = attributes[:'latest_feed_timestamp']
      end

      if attributes.key?(:'additional_attributes')
        self.additional_attributes = attributes[:'additional_attributes']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @created.nil?
        invalid_properties.push('invalid value for "created", created cannot be nil.')
      end

      if @modified.nil?
        invalid_properties.push('invalid value for "modified", modified cannot be nil.')
      end

      if @email.nil?
        invalid_properties.push('invalid value for "email", email cannot be nil.')
      end

      if @account_id.nil?
        invalid_properties.push('invalid value for "account_id", account_id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @state.nil?
        invalid_properties.push('invalid value for "state", state cannot be nil.')
      end

      if @invite_token.nil?
        invalid_properties.push('invalid value for "invite_token", invite_token cannot be nil.')
      end

      if @policy.nil?
        invalid_properties.push('invalid value for "policy", policy cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @created.nil?
      return false if @modified.nil?
      return false if @email.nil?
      return false if @account_id.nil?
      return false if @name.nil?
      return false if @state.nil?
      state_validator = EnumAttributeValidator.new('String', ["invited", "active", "deactivated"])
      return false unless state_validator.valid?(@state)
      return false if @invite_token.nil?
      return false if @policy.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ["invited", "active", "deactivated"])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for \"state\", must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          created == o.created &&
          modified == o.modified &&
          email == o.email &&
          account_id == o.account_id &&
          name == o.name &&
          state == o.state &&
          invite_token == o.invite_token &&
          is_admin == o.is_admin &&
          policy == o.policy &&
          roles == o.roles &&
          auth_method == o.auth_method &&
          application_notification_subscriptions == o.application_notification_subscriptions &&
          last_signed_in == o.last_signed_in &&
          last_accessed == o.last_accessed &&
          latest_feed_timestamp == o.latest_feed_timestamp &&
          additional_attributes == o.additional_attributes
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, created, modified, email, account_id, name, state, invite_token, is_admin, policy, roles, auth_method, application_notification_subscriptions, last_signed_in, last_accessed, latest_feed_timestamp, additional_attributes].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        TalonOne.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
