=begin
#Talon.One API

#The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3

=end

require 'date'

module TalonOne
  # 
  class CustomerSessionV2
    # The ID used for this entity in the application system.
    attr_accessor :integration_id

    # The exact moment this entity was created.
    attr_accessor :created

    # The ID of the application that owns this entity.
    attr_accessor :application_id

    # ID of the customers profile as used within this Talon.One account. May be omitted or set to the empty string if the customer does not yet have a known profile ID.
    attr_accessor :profile_id

    # Any coupon codes entered.
    attr_accessor :coupon_codes

    # Any referral code entered.
    attr_accessor :referral_code

    # Indicates the current state of the session. All sessions must start in the \"open\" state, after which valid transitions are...  1. open -> closed 2. open -> cancelled 3. closed -> cancelled 
    attr_accessor :state

    # All items the customer will be purchasing in this session
    attr_accessor :cart_items

    # Any costs associated with the session that can not be explicitly attributed to cart items. Examples include shipping costs and service fees.
    attr_accessor :additional_costs

    # Identifiers for the customer, this can be used for limits on values such as device ID.
    attr_accessor :identifiers

    # A key-value map of the sessions attributes. The potentially valid attributes are configured in your accounts developer settings. 
    attr_accessor :attributes

    # Indicates whether this is the first session for the customer's profile. Will always be true for anonymous sessions.
    attr_accessor :first_session

    # The total sum of cart-items, as well as additional costs, before any discounts applied
    attr_accessor :total

    # The total sum of cart-items before any discounts applied
    attr_accessor :cart_item_total

    # The total sum of additional costs before any discounts applied
    attr_accessor :additional_cost_total

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'integration_id' => :'integrationId',
        :'created' => :'created',
        :'application_id' => :'applicationId',
        :'profile_id' => :'profileId',
        :'coupon_codes' => :'couponCodes',
        :'referral_code' => :'referralCode',
        :'state' => :'state',
        :'cart_items' => :'cartItems',
        :'additional_costs' => :'additionalCosts',
        :'identifiers' => :'identifiers',
        :'attributes' => :'attributes',
        :'first_session' => :'firstSession',
        :'total' => :'total',
        :'cart_item_total' => :'cartItemTotal',
        :'additional_cost_total' => :'additionalCostTotal'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'integration_id' => :'String',
        :'created' => :'DateTime',
        :'application_id' => :'Integer',
        :'profile_id' => :'String',
        :'coupon_codes' => :'Array<String>',
        :'referral_code' => :'String',
        :'state' => :'String',
        :'cart_items' => :'Array<CartItem>',
        :'additional_costs' => :'Hash<String, AdditionalCost>',
        :'identifiers' => :'Array<String>',
        :'attributes' => :'Object',
        :'first_session' => :'Boolean',
        :'total' => :'Float',
        :'cart_item_total' => :'Float',
        :'additional_cost_total' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TalonOne::CustomerSessionV2` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TalonOne::CustomerSessionV2`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'integration_id')
        self.integration_id = attributes[:'integration_id']
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'application_id')
        self.application_id = attributes[:'application_id']
      end

      if attributes.key?(:'profile_id')
        self.profile_id = attributes[:'profile_id']
      end

      if attributes.key?(:'coupon_codes')
        if (value = attributes[:'coupon_codes']).is_a?(Array)
          self.coupon_codes = value
        end
      end

      if attributes.key?(:'referral_code')
        self.referral_code = attributes[:'referral_code']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      else
        self.state = 'open'
      end

      if attributes.key?(:'cart_items')
        if (value = attributes[:'cart_items']).is_a?(Array)
          self.cart_items = value
        end
      end

      if attributes.key?(:'additional_costs')
        if (value = attributes[:'additional_costs']).is_a?(Hash)
          self.additional_costs = value
        end
      end

      if attributes.key?(:'identifiers')
        if (value = attributes[:'identifiers']).is_a?(Array)
          self.identifiers = value
        end
      end

      if attributes.key?(:'attributes')
        self.attributes = attributes[:'attributes']
      end

      if attributes.key?(:'first_session')
        self.first_session = attributes[:'first_session']
      end

      if attributes.key?(:'total')
        self.total = attributes[:'total']
      end

      if attributes.key?(:'cart_item_total')
        self.cart_item_total = attributes[:'cart_item_total']
      end

      if attributes.key?(:'additional_cost_total')
        self.additional_cost_total = attributes[:'additional_cost_total']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @integration_id.nil?
        invalid_properties.push('invalid value for "integration_id", integration_id cannot be nil.')
      end

      if @created.nil?
        invalid_properties.push('invalid value for "created", created cannot be nil.')
      end

      if @application_id.nil?
        invalid_properties.push('invalid value for "application_id", application_id cannot be nil.')
      end

      if @profile_id.nil?
        invalid_properties.push('invalid value for "profile_id", profile_id cannot be nil.')
      end

      if @state.nil?
        invalid_properties.push('invalid value for "state", state cannot be nil.')
      end

      if @cart_items.nil?
        invalid_properties.push('invalid value for "cart_items", cart_items cannot be nil.')
      end

      if @attributes.nil?
        invalid_properties.push('invalid value for "attributes", attributes cannot be nil.')
      end

      if @first_session.nil?
        invalid_properties.push('invalid value for "first_session", first_session cannot be nil.')
      end

      if @total.nil?
        invalid_properties.push('invalid value for "total", total cannot be nil.')
      end

      if @cart_item_total.nil?
        invalid_properties.push('invalid value for "cart_item_total", cart_item_total cannot be nil.')
      end

      if @additional_cost_total.nil?
        invalid_properties.push('invalid value for "additional_cost_total", additional_cost_total cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @integration_id.nil?
      return false if @created.nil?
      return false if @application_id.nil?
      return false if @profile_id.nil?
      return false if @state.nil?
      state_validator = EnumAttributeValidator.new('String', ["open", "closed", "cancelled"])
      return false unless state_validator.valid?(@state)
      return false if @cart_items.nil?
      return false if @attributes.nil?
      return false if @first_session.nil?
      return false if @total.nil?
      return false if @cart_item_total.nil?
      return false if @additional_cost_total.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ["open", "closed", "cancelled"])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for \"state\", must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          integration_id == o.integration_id &&
          created == o.created &&
          application_id == o.application_id &&
          profile_id == o.profile_id &&
          coupon_codes == o.coupon_codes &&
          referral_code == o.referral_code &&
          state == o.state &&
          cart_items == o.cart_items &&
          additional_costs == o.additional_costs &&
          identifiers == o.identifiers &&
          attributes == o.attributes &&
          first_session == o.first_session &&
          total == o.total &&
          cart_item_total == o.cart_item_total &&
          additional_cost_total == o.additional_cost_total
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [integration_id, created, application_id, profile_id, coupon_codes, referral_code, state, cart_items, additional_costs, identifiers, attributes, first_session, total, cart_item_total, additional_cost_total].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        TalonOne.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
