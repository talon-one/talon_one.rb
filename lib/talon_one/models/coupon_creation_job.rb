=begin
#Talon.One API

#Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 

The version of the OpenAPI document: 

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module TalonOne
  # 
  class CouponCreationJob
    # Internal ID of this entity.
    attr_accessor :id

    # The time this entity was created.
    attr_accessor :created

    # The ID of the campaign that owns this entity.
    attr_accessor :campaign_id

    # The ID of the application that owns this entity.
    attr_accessor :application_id

    # The ID of the account that owns this entity.
    attr_accessor :account_id

    # The number of times the coupon code can be redeemed. `0` means unlimited redemptions but any campaign usage limits will still apply. 
    attr_accessor :usage_limit

    # The total discount value that the code can give. Typically used to represent a gift card value. 
    attr_accessor :discount_limit

    # The number of reservations that can be made with this coupon code. 
    attr_accessor :reservation_limit

    # Timestamp at which point the coupon becomes valid.
    attr_accessor :start_date

    # Expiration date of the coupon. Coupon never expires if this is omitted, zero, or negative.
    attr_accessor :expiry_date

    # The number of new coupon codes to generate for the campaign.
    attr_accessor :number_of_coupons

    attr_accessor :coupon_settings

    # Arbitrary properties associated with coupons.
    attr_accessor :attributes

    # The batch ID coupons created by this job will bear.
    attr_accessor :batch_id

    # The current status of this request. Possible values: - `pending` - `completed` - `failed` - `coupon pattern full` 
    attr_accessor :status

    # The number of coupon codes that were already created for this request.
    attr_accessor :created_amount

    # The number of times this job failed.
    attr_accessor :fail_count

    # An array of individual problems encountered during the request.
    attr_accessor :errors

    # ID of the user who created this effect.
    attr_accessor :created_by

    # Whether or not the user that created this job was notified of its final state.
    attr_accessor :communicated

    # The number of times an attempt to create a chunk of coupons was made during the processing of the job.
    attr_accessor :chunk_execution_count

    # The number of coupons that will be created in a single transactions. Coupons will be created in chunks until arriving at the requested amount.
    attr_accessor :chunk_size

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'created' => :'created',
        :'campaign_id' => :'campaignId',
        :'application_id' => :'applicationId',
        :'account_id' => :'accountId',
        :'usage_limit' => :'usageLimit',
        :'discount_limit' => :'discountLimit',
        :'reservation_limit' => :'reservationLimit',
        :'start_date' => :'startDate',
        :'expiry_date' => :'expiryDate',
        :'number_of_coupons' => :'numberOfCoupons',
        :'coupon_settings' => :'couponSettings',
        :'attributes' => :'attributes',
        :'batch_id' => :'batchId',
        :'status' => :'status',
        :'created_amount' => :'createdAmount',
        :'fail_count' => :'failCount',
        :'errors' => :'errors',
        :'created_by' => :'createdBy',
        :'communicated' => :'communicated',
        :'chunk_execution_count' => :'chunkExecutionCount',
        :'chunk_size' => :'chunkSize'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'created' => :'DateTime',
        :'campaign_id' => :'Integer',
        :'application_id' => :'Integer',
        :'account_id' => :'Integer',
        :'usage_limit' => :'Integer',
        :'discount_limit' => :'Float',
        :'reservation_limit' => :'Integer',
        :'start_date' => :'DateTime',
        :'expiry_date' => :'DateTime',
        :'number_of_coupons' => :'Integer',
        :'coupon_settings' => :'CodeGeneratorSettings',
        :'attributes' => :'Object',
        :'batch_id' => :'String',
        :'status' => :'String',
        :'created_amount' => :'Integer',
        :'fail_count' => :'Integer',
        :'errors' => :'Array<String>',
        :'created_by' => :'Integer',
        :'communicated' => :'Boolean',
        :'chunk_execution_count' => :'Integer',
        :'chunk_size' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TalonOne::CouponCreationJob` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TalonOne::CouponCreationJob`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'campaign_id')
        self.campaign_id = attributes[:'campaign_id']
      end

      if attributes.key?(:'application_id')
        self.application_id = attributes[:'application_id']
      end

      if attributes.key?(:'account_id')
        self.account_id = attributes[:'account_id']
      end

      if attributes.key?(:'usage_limit')
        self.usage_limit = attributes[:'usage_limit']
      end

      if attributes.key?(:'discount_limit')
        self.discount_limit = attributes[:'discount_limit']
      end

      if attributes.key?(:'reservation_limit')
        self.reservation_limit = attributes[:'reservation_limit']
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.key?(:'expiry_date')
        self.expiry_date = attributes[:'expiry_date']
      end

      if attributes.key?(:'number_of_coupons')
        self.number_of_coupons = attributes[:'number_of_coupons']
      end

      if attributes.key?(:'coupon_settings')
        self.coupon_settings = attributes[:'coupon_settings']
      end

      if attributes.key?(:'attributes')
        self.attributes = attributes[:'attributes']
      end

      if attributes.key?(:'batch_id')
        self.batch_id = attributes[:'batch_id']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'created_amount')
        self.created_amount = attributes[:'created_amount']
      end

      if attributes.key?(:'fail_count')
        self.fail_count = attributes[:'fail_count']
      end

      if attributes.key?(:'errors')
        if (value = attributes[:'errors']).is_a?(Array)
          self.errors = value
        end
      end

      if attributes.key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.key?(:'communicated')
        self.communicated = attributes[:'communicated']
      end

      if attributes.key?(:'chunk_execution_count')
        self.chunk_execution_count = attributes[:'chunk_execution_count']
      end

      if attributes.key?(:'chunk_size')
        self.chunk_size = attributes[:'chunk_size']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @created.nil?
        invalid_properties.push('invalid value for "created", created cannot be nil.')
      end

      if @campaign_id.nil?
        invalid_properties.push('invalid value for "campaign_id", campaign_id cannot be nil.')
      end

      if @application_id.nil?
        invalid_properties.push('invalid value for "application_id", application_id cannot be nil.')
      end

      if @account_id.nil?
        invalid_properties.push('invalid value for "account_id", account_id cannot be nil.')
      end

      if @usage_limit.nil?
        invalid_properties.push('invalid value for "usage_limit", usage_limit cannot be nil.')
      end

      if @usage_limit > 999999
        invalid_properties.push('invalid value for "usage_limit", must be smaller than or equal to 999999.')
      end

      if @usage_limit < 0
        invalid_properties.push('invalid value for "usage_limit", must be greater than or equal to 0.')
      end

      if !@discount_limit.nil? && @discount_limit > 999999
        invalid_properties.push('invalid value for "discount_limit", must be smaller than or equal to 999999.')
      end

      if !@discount_limit.nil? && @discount_limit < 0
        invalid_properties.push('invalid value for "discount_limit", must be greater than or equal to 0.')
      end

      if !@reservation_limit.nil? && @reservation_limit > 999999
        invalid_properties.push('invalid value for "reservation_limit", must be smaller than or equal to 999999.')
      end

      if !@reservation_limit.nil? && @reservation_limit < 0
        invalid_properties.push('invalid value for "reservation_limit", must be greater than or equal to 0.')
      end

      if @number_of_coupons.nil?
        invalid_properties.push('invalid value for "number_of_coupons", number_of_coupons cannot be nil.')
      end

      if @number_of_coupons > 5000000
        invalid_properties.push('invalid value for "number_of_coupons", must be smaller than or equal to 5000000.')
      end

      if @number_of_coupons < 1
        invalid_properties.push('invalid value for "number_of_coupons", must be greater than or equal to 1.')
      end

      if @attributes.nil?
        invalid_properties.push('invalid value for "attributes", attributes cannot be nil.')
      end

      if @batch_id.nil?
        invalid_properties.push('invalid value for "batch_id", batch_id cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @created_amount.nil?
        invalid_properties.push('invalid value for "created_amount", created_amount cannot be nil.')
      end

      if @fail_count.nil?
        invalid_properties.push('invalid value for "fail_count", fail_count cannot be nil.')
      end

      if @errors.nil?
        invalid_properties.push('invalid value for "errors", errors cannot be nil.')
      end

      if @created_by.nil?
        invalid_properties.push('invalid value for "created_by", created_by cannot be nil.')
      end

      if @communicated.nil?
        invalid_properties.push('invalid value for "communicated", communicated cannot be nil.')
      end

      if @chunk_execution_count.nil?
        invalid_properties.push('invalid value for "chunk_execution_count", chunk_execution_count cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @created.nil?
      return false if @campaign_id.nil?
      return false if @application_id.nil?
      return false if @account_id.nil?
      return false if @usage_limit.nil?
      return false if @usage_limit > 999999
      return false if @usage_limit < 0
      return false if !@discount_limit.nil? && @discount_limit > 999999
      return false if !@discount_limit.nil? && @discount_limit < 0
      return false if !@reservation_limit.nil? && @reservation_limit > 999999
      return false if !@reservation_limit.nil? && @reservation_limit < 0
      return false if @number_of_coupons.nil?
      return false if @number_of_coupons > 5000000
      return false if @number_of_coupons < 1
      return false if @attributes.nil?
      return false if @batch_id.nil?
      return false if @status.nil?
      return false if @created_amount.nil?
      return false if @fail_count.nil?
      return false if @errors.nil?
      return false if @created_by.nil?
      return false if @communicated.nil?
      return false if @chunk_execution_count.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] usage_limit Value to be assigned
    def usage_limit=(usage_limit)
      if usage_limit.nil?
        fail ArgumentError, 'usage_limit cannot be nil'
      end

      if usage_limit > 999999
        fail ArgumentError, 'invalid value for "usage_limit", must be smaller than or equal to 999999.'
      end

      if usage_limit < 0
        fail ArgumentError, 'invalid value for "usage_limit", must be greater than or equal to 0.'
      end

      @usage_limit = usage_limit
    end

    # Custom attribute writer method with validation
    # @param [Object] discount_limit Value to be assigned
    def discount_limit=(discount_limit)
      if !discount_limit.nil? && discount_limit > 999999
        fail ArgumentError, 'invalid value for "discount_limit", must be smaller than or equal to 999999.'
      end

      if !discount_limit.nil? && discount_limit < 0
        fail ArgumentError, 'invalid value for "discount_limit", must be greater than or equal to 0.'
      end

      @discount_limit = discount_limit
    end

    # Custom attribute writer method with validation
    # @param [Object] reservation_limit Value to be assigned
    def reservation_limit=(reservation_limit)
      if !reservation_limit.nil? && reservation_limit > 999999
        fail ArgumentError, 'invalid value for "reservation_limit", must be smaller than or equal to 999999.'
      end

      if !reservation_limit.nil? && reservation_limit < 0
        fail ArgumentError, 'invalid value for "reservation_limit", must be greater than or equal to 0.'
      end

      @reservation_limit = reservation_limit
    end

    # Custom attribute writer method with validation
    # @param [Object] number_of_coupons Value to be assigned
    def number_of_coupons=(number_of_coupons)
      if number_of_coupons.nil?
        fail ArgumentError, 'number_of_coupons cannot be nil'
      end

      if number_of_coupons > 5000000
        fail ArgumentError, 'invalid value for "number_of_coupons", must be smaller than or equal to 5000000.'
      end

      if number_of_coupons < 1
        fail ArgumentError, 'invalid value for "number_of_coupons", must be greater than or equal to 1.'
      end

      @number_of_coupons = number_of_coupons
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          created == o.created &&
          campaign_id == o.campaign_id &&
          application_id == o.application_id &&
          account_id == o.account_id &&
          usage_limit == o.usage_limit &&
          discount_limit == o.discount_limit &&
          reservation_limit == o.reservation_limit &&
          start_date == o.start_date &&
          expiry_date == o.expiry_date &&
          number_of_coupons == o.number_of_coupons &&
          coupon_settings == o.coupon_settings &&
          attributes == o.attributes &&
          batch_id == o.batch_id &&
          status == o.status &&
          created_amount == o.created_amount &&
          fail_count == o.fail_count &&
          errors == o.errors &&
          created_by == o.created_by &&
          communicated == o.communicated &&
          chunk_execution_count == o.chunk_execution_count &&
          chunk_size == o.chunk_size
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, created, campaign_id, application_id, account_id, usage_limit, discount_limit, reservation_limit, start_date, expiry_date, number_of_coupons, coupon_settings, attributes, batch_id, status, created_amount, fail_count, errors, created_by, communicated, chunk_execution_count, chunk_size].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        TalonOne.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
