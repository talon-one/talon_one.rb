=begin
#Talon.One API

#Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 

The version of the OpenAPI document: 

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module TalonOne
  # The absolute duration after which the achievement ends and resets for a particular customer profile.  **Note**: The duration follows the time zone of the Application this achievement belongs to. 
  class TimePoint
    # The achievement ends and resets in this month.  **Note**: Only applicable if the period is set to `Y`. 
    attr_accessor :month

    # The achievement ends and resets on this day of the month.  **Note**: Only applicable if the period is set to `Y` or `M`. 
    attr_accessor :day_of_month

    # The achievement ends and resets on this day of the week. `1` represents `Monday` and `7` represents `Sunday`.  **Note**: Only applicable if the period is set to `W`. 
    attr_accessor :day_of_week

    # The achievement ends and resets at this hour.
    attr_accessor :hour

    # The achievement ends and resets at this minute.
    attr_accessor :minute

    # The achievement ends and resets at this second.
    attr_accessor :second

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'month' => :'month',
        :'day_of_month' => :'dayOfMonth',
        :'day_of_week' => :'dayOfWeek',
        :'hour' => :'hour',
        :'minute' => :'minute',
        :'second' => :'second'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'month' => :'Integer',
        :'day_of_month' => :'Integer',
        :'day_of_week' => :'Integer',
        :'hour' => :'Integer',
        :'minute' => :'Integer',
        :'second' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TalonOne::TimePoint` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TalonOne::TimePoint`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'month')
        self.month = attributes[:'month']
      end

      if attributes.key?(:'day_of_month')
        self.day_of_month = attributes[:'day_of_month']
      end

      if attributes.key?(:'day_of_week')
        self.day_of_week = attributes[:'day_of_week']
      end

      if attributes.key?(:'hour')
        self.hour = attributes[:'hour']
      end

      if attributes.key?(:'minute')
        self.minute = attributes[:'minute']
      end

      if attributes.key?(:'second')
        self.second = attributes[:'second']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@month.nil? && @month > 12
        invalid_properties.push('invalid value for "month", must be smaller than or equal to 12.')
      end

      if !@month.nil? && @month < 1
        invalid_properties.push('invalid value for "month", must be greater than or equal to 1.')
      end

      if !@day_of_month.nil? && @day_of_month > 31
        invalid_properties.push('invalid value for "day_of_month", must be smaller than or equal to 31.')
      end

      if !@day_of_month.nil? && @day_of_month < 1
        invalid_properties.push('invalid value for "day_of_month", must be greater than or equal to 1.')
      end

      if !@day_of_week.nil? && @day_of_week > 7
        invalid_properties.push('invalid value for "day_of_week", must be smaller than or equal to 7.')
      end

      if !@day_of_week.nil? && @day_of_week < 1
        invalid_properties.push('invalid value for "day_of_week", must be greater than or equal to 1.')
      end

      if @hour.nil?
        invalid_properties.push('invalid value for "hour", hour cannot be nil.')
      end

      if @minute.nil?
        invalid_properties.push('invalid value for "minute", minute cannot be nil.')
      end

      if @second.nil?
        invalid_properties.push('invalid value for "second", second cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@month.nil? && @month > 12
      return false if !@month.nil? && @month < 1
      return false if !@day_of_month.nil? && @day_of_month > 31
      return false if !@day_of_month.nil? && @day_of_month < 1
      return false if !@day_of_week.nil? && @day_of_week > 7
      return false if !@day_of_week.nil? && @day_of_week < 1
      return false if @hour.nil?
      return false if @minute.nil?
      return false if @second.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] month Value to be assigned
    def month=(month)
      if !month.nil? && month > 12
        fail ArgumentError, 'invalid value for "month", must be smaller than or equal to 12.'
      end

      if !month.nil? && month < 1
        fail ArgumentError, 'invalid value for "month", must be greater than or equal to 1.'
      end

      @month = month
    end

    # Custom attribute writer method with validation
    # @param [Object] day_of_month Value to be assigned
    def day_of_month=(day_of_month)
      if !day_of_month.nil? && day_of_month > 31
        fail ArgumentError, 'invalid value for "day_of_month", must be smaller than or equal to 31.'
      end

      if !day_of_month.nil? && day_of_month < 1
        fail ArgumentError, 'invalid value for "day_of_month", must be greater than or equal to 1.'
      end

      @day_of_month = day_of_month
    end

    # Custom attribute writer method with validation
    # @param [Object] day_of_week Value to be assigned
    def day_of_week=(day_of_week)
      if !day_of_week.nil? && day_of_week > 7
        fail ArgumentError, 'invalid value for "day_of_week", must be smaller than or equal to 7.'
      end

      if !day_of_week.nil? && day_of_week < 1
        fail ArgumentError, 'invalid value for "day_of_week", must be greater than or equal to 1.'
      end

      @day_of_week = day_of_week
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          month == o.month &&
          day_of_month == o.day_of_month &&
          day_of_week == o.day_of_week &&
          hour == o.hour &&
          minute == o.minute &&
          second == o.second
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [month, day_of_month, day_of_week, hour, minute, second].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        TalonOne.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
