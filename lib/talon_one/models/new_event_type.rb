=begin
#Talon.One API

#The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module TalonOne
  # 
  class NewEventType
    # The IDs of the applications that are related to this entity.
    attr_accessor :application_ids

    # The human-friendly display name for this event type. Use a short, past-tense, description of the event.
    attr_accessor :title

    # The machine-friendly canonical name for this event type. This will be used in URLs, and cannot be changed after an event type has been created.
    attr_accessor :name

    # An explanation of when the event type is triggered. Write this with a campaign manager in mind. For example:  > The \"Payment Accepted\" event is triggered after successful processing of a payment by our payment gateway. 
    attr_accessor :description

    # This defines how the request payload will be parsed before your handler code is run.
    attr_accessor :mime_type

    # It is often helpful to include an example payload with the event type definition for documentation purposes.
    attr_accessor :example_payload

    # It is strongly recommended to define a JSON schema that will be used to perform structural validation of request payloads after parsing. 
    attr_accessor :schema

    # The language of the handler code. Currently only `\"talang\"` is supported.
    attr_accessor :handler_language

    # Code that will be run after successful parsing & validation of the payload for this event. This code _may_ choose to evaluate campaign rules. 
    attr_accessor :handler

    # The version of this event type. When updating an existing event type this must be **exactly** `currentVersion + 1`. 
    attr_accessor :version

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'application_ids' => :'applicationIds',
        :'title' => :'title',
        :'name' => :'name',
        :'description' => :'description',
        :'mime_type' => :'mimeType',
        :'example_payload' => :'examplePayload',
        :'schema' => :'schema',
        :'handler_language' => :'handlerLanguage',
        :'handler' => :'handler',
        :'version' => :'version'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'application_ids' => :'Array<Integer>',
        :'title' => :'String',
        :'name' => :'String',
        :'description' => :'String',
        :'mime_type' => :'String',
        :'example_payload' => :'String',
        :'schema' => :'Object',
        :'handler_language' => :'String',
        :'handler' => :'String',
        :'version' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TalonOne::NewEventType` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TalonOne::NewEventType`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'application_ids')
        if (value = attributes[:'application_ids']).is_a?(Array)
          self.application_ids = value
        end
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'mime_type')
        self.mime_type = attributes[:'mime_type']
      end

      if attributes.key?(:'example_payload')
        self.example_payload = attributes[:'example_payload']
      end

      if attributes.key?(:'schema')
        self.schema = attributes[:'schema']
      end

      if attributes.key?(:'handler_language')
        self.handler_language = attributes[:'handler_language']
      end

      if attributes.key?(:'handler')
        self.handler = attributes[:'handler']
      end

      if attributes.key?(:'version')
        self.version = attributes[:'version']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @application_ids.nil?
        invalid_properties.push('invalid value for "application_ids", application_ids cannot be nil.')
      end

      if @title.nil?
        invalid_properties.push('invalid value for "title", title cannot be nil.')
      end

      if @title.to_s.length < 1
        invalid_properties.push('invalid value for "title", the character length must be great than or equal to 1.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name.to_s.length < 1
        invalid_properties.push('invalid value for "name", the character length must be great than or equal to 1.')
      end

      if @description.nil?
        invalid_properties.push('invalid value for "description", description cannot be nil.')
      end

      if @mime_type.nil?
        invalid_properties.push('invalid value for "mime_type", mime_type cannot be nil.')
      end

      if @handler.nil?
        invalid_properties.push('invalid value for "handler", handler cannot be nil.')
      end

      if @version.nil?
        invalid_properties.push('invalid value for "version", version cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @application_ids.nil?
      return false if @title.nil?
      return false if @title.to_s.length < 1
      return false if @name.nil?
      return false if @name.to_s.length < 1
      return false if @description.nil?
      return false if @mime_type.nil?
      mime_type_validator = EnumAttributeValidator.new('String', ["application/json", "application/x-www-form-urlencoded", "none"])
      return false unless mime_type_validator.valid?(@mime_type)
      handler_language_validator = EnumAttributeValidator.new('String', ["talang"])
      return false unless handler_language_validator.valid?(@handler_language)
      return false if @handler.nil?
      return false if @version.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] title Value to be assigned
    def title=(title)
      if title.nil?
        fail ArgumentError, 'title cannot be nil'
      end

      if title.to_s.length < 1
        fail ArgumentError, 'invalid value for "title", the character length must be great than or equal to 1.'
      end

      @title = title
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length < 1
        fail ArgumentError, 'invalid value for "name", the character length must be great than or equal to 1.'
      end

      @name = name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mime_type Object to be assigned
    def mime_type=(mime_type)
      validator = EnumAttributeValidator.new('String', ["application/json", "application/x-www-form-urlencoded", "none"])
      unless validator.valid?(mime_type)
        fail ArgumentError, "invalid value for \"mime_type\", must be one of #{validator.allowable_values}."
      end
      @mime_type = mime_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] handler_language Object to be assigned
    def handler_language=(handler_language)
      validator = EnumAttributeValidator.new('String', ["talang"])
      unless validator.valid?(handler_language)
        fail ArgumentError, "invalid value for \"handler_language\", must be one of #{validator.allowable_values}."
      end
      @handler_language = handler_language
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          application_ids == o.application_ids &&
          title == o.title &&
          name == o.name &&
          description == o.description &&
          mime_type == o.mime_type &&
          example_payload == o.example_payload &&
          schema == o.schema &&
          handler_language == o.handler_language &&
          handler == o.handler &&
          version == o.version
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [application_ids, title, name, description, mime_type, example_payload, schema, handler_language, handler, version].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        TalonOne.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
