=begin
#Talon.One API

#The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module TalonOne
  # 
  class Campaign
    # Unique ID for this entity.
    attr_accessor :id

    # The exact moment this entity was created.
    attr_accessor :created

    # The ID of the application that owns this entity.
    attr_accessor :application_id

    # The ID of the account that owns this entity.
    attr_accessor :user_id

    # A friendly name for this campaign.
    attr_accessor :name

    # A detailed description of the campaign.
    attr_accessor :description

    # Datetime when the campaign will become active.
    attr_accessor :start_time

    # Datetime when the campaign will become in-active.
    attr_accessor :end_time

    # Arbitrary properties associated with this campaign
    attr_accessor :attributes

    # A disabled or archived campaign is not evaluated for rules or coupons. 
    attr_accessor :state

    # ID of Ruleset this campaign applies on customer session evaluation.
    attr_accessor :active_ruleset_id

    # A list of tags for the campaign.
    attr_accessor :tags

    # A list of features for the campaign.
    attr_accessor :features

    attr_accessor :coupon_settings

    attr_accessor :referral_settings

    # The set of limits that will operate for this campaign
    attr_accessor :limits

    # The IDs of the campaign groups that own this entity.
    attr_accessor :campaign_groups

    # Number of coupons redeemed in the campaign.
    attr_accessor :coupon_redemption_count

    # Number of referral codes redeemed in the campaign.
    attr_accessor :referral_redemption_count

    # Total amount of discounts redeemed in the campaign.
    attr_accessor :discount_count

    # Total number of times discounts were redeemed in this campaign.
    attr_accessor :discount_effect_count

    # Total number of coupons created by rules in this campaign.
    attr_accessor :coupon_creation_count

    # Timestamp of the most recent event received by this campaign.
    attr_accessor :last_activity

    # Timestamp of the most recent update to the campaign or any of its elements.
    attr_accessor :updated

    # Name of the user who created this campaign if available.
    attr_accessor :created_by

    # Name of the user who last updated this campaign if available.
    attr_accessor :updated_by

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'created' => :'created',
        :'application_id' => :'applicationId',
        :'user_id' => :'userId',
        :'name' => :'name',
        :'description' => :'description',
        :'start_time' => :'startTime',
        :'end_time' => :'endTime',
        :'attributes' => :'attributes',
        :'state' => :'state',
        :'active_ruleset_id' => :'activeRulesetId',
        :'tags' => :'tags',
        :'features' => :'features',
        :'coupon_settings' => :'couponSettings',
        :'referral_settings' => :'referralSettings',
        :'limits' => :'limits',
        :'campaign_groups' => :'campaignGroups',
        :'coupon_redemption_count' => :'couponRedemptionCount',
        :'referral_redemption_count' => :'referralRedemptionCount',
        :'discount_count' => :'discountCount',
        :'discount_effect_count' => :'discountEffectCount',
        :'coupon_creation_count' => :'couponCreationCount',
        :'last_activity' => :'lastActivity',
        :'updated' => :'updated',
        :'created_by' => :'createdBy',
        :'updated_by' => :'updatedBy'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'created' => :'DateTime',
        :'application_id' => :'Integer',
        :'user_id' => :'Integer',
        :'name' => :'String',
        :'description' => :'String',
        :'start_time' => :'DateTime',
        :'end_time' => :'DateTime',
        :'attributes' => :'Object',
        :'state' => :'String',
        :'active_ruleset_id' => :'Integer',
        :'tags' => :'Array<String>',
        :'features' => :'Array<String>',
        :'coupon_settings' => :'CodeGeneratorSettings',
        :'referral_settings' => :'CodeGeneratorSettings',
        :'limits' => :'Array<LimitConfig>',
        :'campaign_groups' => :'Array<Integer>',
        :'coupon_redemption_count' => :'Integer',
        :'referral_redemption_count' => :'Integer',
        :'discount_count' => :'Integer',
        :'discount_effect_count' => :'Integer',
        :'coupon_creation_count' => :'Integer',
        :'last_activity' => :'DateTime',
        :'updated' => :'DateTime',
        :'created_by' => :'String',
        :'updated_by' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TalonOne::Campaign` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TalonOne::Campaign`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'application_id')
        self.application_id = attributes[:'application_id']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'start_time')
        self.start_time = attributes[:'start_time']
      end

      if attributes.key?(:'end_time')
        self.end_time = attributes[:'end_time']
      end

      if attributes.key?(:'attributes')
        self.attributes = attributes[:'attributes']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      else
        self.state = 'enabled'
      end

      if attributes.key?(:'active_ruleset_id')
        self.active_ruleset_id = attributes[:'active_ruleset_id']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'features')
        if (value = attributes[:'features']).is_a?(Array)
          self.features = value
        end
      end

      if attributes.key?(:'coupon_settings')
        self.coupon_settings = attributes[:'coupon_settings']
      end

      if attributes.key?(:'referral_settings')
        self.referral_settings = attributes[:'referral_settings']
      end

      if attributes.key?(:'limits')
        if (value = attributes[:'limits']).is_a?(Array)
          self.limits = value
        end
      end

      if attributes.key?(:'campaign_groups')
        if (value = attributes[:'campaign_groups']).is_a?(Array)
          self.campaign_groups = value
        end
      end

      if attributes.key?(:'coupon_redemption_count')
        self.coupon_redemption_count = attributes[:'coupon_redemption_count']
      end

      if attributes.key?(:'referral_redemption_count')
        self.referral_redemption_count = attributes[:'referral_redemption_count']
      end

      if attributes.key?(:'discount_count')
        self.discount_count = attributes[:'discount_count']
      end

      if attributes.key?(:'discount_effect_count')
        self.discount_effect_count = attributes[:'discount_effect_count']
      end

      if attributes.key?(:'coupon_creation_count')
        self.coupon_creation_count = attributes[:'coupon_creation_count']
      end

      if attributes.key?(:'last_activity')
        self.last_activity = attributes[:'last_activity']
      end

      if attributes.key?(:'updated')
        self.updated = attributes[:'updated']
      end

      if attributes.key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.key?(:'updated_by')
        self.updated_by = attributes[:'updated_by']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @created.nil?
        invalid_properties.push('invalid value for "created", created cannot be nil.')
      end

      if @application_id.nil?
        invalid_properties.push('invalid value for "application_id", application_id cannot be nil.')
      end

      if @user_id.nil?
        invalid_properties.push('invalid value for "user_id", user_id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name.to_s.length < 1
        invalid_properties.push('invalid value for "name", the character length must be great than or equal to 1.')
      end

      if @description.nil?
        invalid_properties.push('invalid value for "description", description cannot be nil.')
      end

      if @state.nil?
        invalid_properties.push('invalid value for "state", state cannot be nil.')
      end

      if @tags.nil?
        invalid_properties.push('invalid value for "tags", tags cannot be nil.')
      end

      if @features.nil?
        invalid_properties.push('invalid value for "features", features cannot be nil.')
      end

      if @limits.nil?
        invalid_properties.push('invalid value for "limits", limits cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @created.nil?
      return false if @application_id.nil?
      return false if @user_id.nil?
      return false if @name.nil?
      return false if @name.to_s.length < 1
      return false if @description.nil?
      return false if @state.nil?
      state_validator = EnumAttributeValidator.new('String', ["enabled", "disabled", "archived"])
      return false unless state_validator.valid?(@state)
      return false if @tags.nil?
      return false if @features.nil?
      return false if @limits.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length < 1
        fail ArgumentError, 'invalid value for "name", the character length must be great than or equal to 1.'
      end

      @name = name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ["enabled", "disabled", "archived"])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for \"state\", must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          created == o.created &&
          application_id == o.application_id &&
          user_id == o.user_id &&
          name == o.name &&
          description == o.description &&
          start_time == o.start_time &&
          end_time == o.end_time &&
          attributes == o.attributes &&
          state == o.state &&
          active_ruleset_id == o.active_ruleset_id &&
          tags == o.tags &&
          features == o.features &&
          coupon_settings == o.coupon_settings &&
          referral_settings == o.referral_settings &&
          limits == o.limits &&
          campaign_groups == o.campaign_groups &&
          coupon_redemption_count == o.coupon_redemption_count &&
          referral_redemption_count == o.referral_redemption_count &&
          discount_count == o.discount_count &&
          discount_effect_count == o.discount_effect_count &&
          coupon_creation_count == o.coupon_creation_count &&
          last_activity == o.last_activity &&
          updated == o.updated &&
          created_by == o.created_by &&
          updated_by == o.updated_by
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, created, application_id, user_id, name, description, start_time, end_time, attributes, state, active_ruleset_id, tags, features, coupon_settings, referral_settings, limits, campaign_groups, coupon_redemption_count, referral_redemption_count, discount_count, discount_effect_count, coupon_creation_count, last_activity, updated, created_by, updated_by].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        TalonOne.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
