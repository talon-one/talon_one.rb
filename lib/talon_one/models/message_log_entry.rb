=begin
#Talon.One API

#Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 

The version of the OpenAPI document: 

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module TalonOne
  # Message Log.
  class MessageLogEntry
    # Unique identifier of the message.
    attr_accessor :id

    # Name of the service that generated the log entry.
    attr_accessor :service

    # Type of change that triggered the notification.
    attr_accessor :change_type

    # ID of the notification.
    attr_accessor :notification_id

    # The name of the notification.
    attr_accessor :notification_name

    # ID of the webhook.
    attr_accessor :webhook_id

    # The name of the webhook.
    attr_accessor :webhook_name

    attr_accessor :request

    attr_accessor :response

    # Timestamp when the log entry was created.
    attr_accessor :created_at

    # The entity type the log is related to. 
    attr_accessor :entity_type

    # The target URL of the request.
    attr_accessor :url

    # Identifier of the Application.
    attr_accessor :application_id

    # Identifier of the loyalty program.
    attr_accessor :loyalty_program_id

    # Identifier of the campaign.
    attr_accessor :campaign_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'service' => :'service',
        :'change_type' => :'changeType',
        :'notification_id' => :'notificationId',
        :'notification_name' => :'notificationName',
        :'webhook_id' => :'webhookId',
        :'webhook_name' => :'webhookName',
        :'request' => :'request',
        :'response' => :'response',
        :'created_at' => :'createdAt',
        :'entity_type' => :'entityType',
        :'url' => :'url',
        :'application_id' => :'applicationId',
        :'loyalty_program_id' => :'loyaltyProgramId',
        :'campaign_id' => :'campaignId'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'service' => :'String',
        :'change_type' => :'String',
        :'notification_id' => :'Integer',
        :'notification_name' => :'String',
        :'webhook_id' => :'Integer',
        :'webhook_name' => :'String',
        :'request' => :'MessageLogRequest',
        :'response' => :'MessageLogResponse',
        :'created_at' => :'DateTime',
        :'entity_type' => :'String',
        :'url' => :'String',
        :'application_id' => :'Integer',
        :'loyalty_program_id' => :'Integer',
        :'campaign_id' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TalonOne::MessageLogEntry` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TalonOne::MessageLogEntry`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'service')
        self.service = attributes[:'service']
      end

      if attributes.key?(:'change_type')
        self.change_type = attributes[:'change_type']
      end

      if attributes.key?(:'notification_id')
        self.notification_id = attributes[:'notification_id']
      end

      if attributes.key?(:'notification_name')
        self.notification_name = attributes[:'notification_name']
      end

      if attributes.key?(:'webhook_id')
        self.webhook_id = attributes[:'webhook_id']
      end

      if attributes.key?(:'webhook_name')
        self.webhook_name = attributes[:'webhook_name']
      end

      if attributes.key?(:'request')
        self.request = attributes[:'request']
      end

      if attributes.key?(:'response')
        self.response = attributes[:'response']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'entity_type')
        self.entity_type = attributes[:'entity_type']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'application_id')
        self.application_id = attributes[:'application_id']
      end

      if attributes.key?(:'loyalty_program_id')
        self.loyalty_program_id = attributes[:'loyalty_program_id']
      end

      if attributes.key?(:'campaign_id')
        self.campaign_id = attributes[:'campaign_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @service.nil?
        invalid_properties.push('invalid value for "service", service cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @entity_type.nil?
        invalid_properties.push('invalid value for "entity_type", entity_type cannot be nil.')
      end

      if !@application_id.nil? && @application_id < 1
        invalid_properties.push('invalid value for "application_id", must be greater than or equal to 1.')
      end

      if !@loyalty_program_id.nil? && @loyalty_program_id < 1
        invalid_properties.push('invalid value for "loyalty_program_id", must be greater than or equal to 1.')
      end

      if !@campaign_id.nil? && @campaign_id < 1
        invalid_properties.push('invalid value for "campaign_id", must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @service.nil?
      return false if @created_at.nil?
      return false if @entity_type.nil?
      entity_type_validator = EnumAttributeValidator.new('String', ["application", "loyalty_program", "webhook"])
      return false unless entity_type_validator.valid?(@entity_type)
      return false if !@application_id.nil? && @application_id < 1
      return false if !@loyalty_program_id.nil? && @loyalty_program_id < 1
      return false if !@campaign_id.nil? && @campaign_id < 1
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] entity_type Object to be assigned
    def entity_type=(entity_type)
      validator = EnumAttributeValidator.new('String', ["application", "loyalty_program", "webhook"])
      unless validator.valid?(entity_type)
        fail ArgumentError, "invalid value for \"entity_type\", must be one of #{validator.allowable_values}."
      end
      @entity_type = entity_type
    end

    # Custom attribute writer method with validation
    # @param [Object] application_id Value to be assigned
    def application_id=(application_id)
      if !application_id.nil? && application_id < 1
        fail ArgumentError, 'invalid value for "application_id", must be greater than or equal to 1.'
      end

      @application_id = application_id
    end

    # Custom attribute writer method with validation
    # @param [Object] loyalty_program_id Value to be assigned
    def loyalty_program_id=(loyalty_program_id)
      if !loyalty_program_id.nil? && loyalty_program_id < 1
        fail ArgumentError, 'invalid value for "loyalty_program_id", must be greater than or equal to 1.'
      end

      @loyalty_program_id = loyalty_program_id
    end

    # Custom attribute writer method with validation
    # @param [Object] campaign_id Value to be assigned
    def campaign_id=(campaign_id)
      if !campaign_id.nil? && campaign_id < 1
        fail ArgumentError, 'invalid value for "campaign_id", must be greater than or equal to 1.'
      end

      @campaign_id = campaign_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          service == o.service &&
          change_type == o.change_type &&
          notification_id == o.notification_id &&
          notification_name == o.notification_name &&
          webhook_id == o.webhook_id &&
          webhook_name == o.webhook_name &&
          request == o.request &&
          response == o.response &&
          created_at == o.created_at &&
          entity_type == o.entity_type &&
          url == o.url &&
          application_id == o.application_id &&
          loyalty_program_id == o.loyalty_program_id &&
          campaign_id == o.campaign_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, service, change_type, notification_id, notification_name, webhook_id, webhook_name, request, response, created_at, entity_type, url, application_id, loyalty_program_id, campaign_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        TalonOne.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
