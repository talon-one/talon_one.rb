=begin
#Talon.One API

#The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module TalonOne
  # 
  class ApplicationCustomer
    # Unique ID for this entity.
    attr_accessor :id

    # The exact moment this entity was created. The exact moment this entity was created. The exact moment this entity was created.
    attr_accessor :created

    # The ID used for this entity in the application system. The ID used for this entity in the application system.
    attr_accessor :integration_id

    # Arbitrary properties associated with this item
    attr_accessor :attributes

    # The ID of the Talon.One account that owns this profile. The ID of the Talon.One account that owns this profile.
    attr_accessor :account_id

    # The total amount of closed sessions by a customer. A closed session is a successful purchase.
    attr_accessor :closed_sessions

    # Sum of all purchases made by this customer
    attr_accessor :total_sales

    # A list of loyalty programs joined by the customer
    attr_accessor :loyalty_memberships

    # Timestamp of the most recent event received from this customer
    attr_accessor :last_activity

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'created' => :'created',
        :'integration_id' => :'integrationId',
        :'attributes' => :'attributes',
        :'account_id' => :'accountId',
        :'closed_sessions' => :'closedSessions',
        :'total_sales' => :'totalSales',
        :'loyalty_memberships' => :'loyaltyMemberships',
        :'last_activity' => :'lastActivity'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'created' => :'DateTime',
        :'integration_id' => :'String',
        :'attributes' => :'Object',
        :'account_id' => :'Integer',
        :'closed_sessions' => :'Integer',
        :'total_sales' => :'Float',
        :'loyalty_memberships' => :'Array<LoyaltyMembership>',
        :'last_activity' => :'DateTime'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'integrationId')
        self.integration_id = attributes[:'integrationId']
      end

      if attributes.has_key?(:'attributes')
        self.attributes = attributes[:'attributes']
      end

      if attributes.has_key?(:'accountId')
        self.account_id = attributes[:'accountId']
      end

      if attributes.has_key?(:'closedSessions')
        self.closed_sessions = attributes[:'closedSessions']
      end

      if attributes.has_key?(:'totalSales')
        self.total_sales = attributes[:'totalSales']
      end

      if attributes.has_key?(:'loyaltyMemberships')
        if (value = attributes[:'loyaltyMemberships']).is_a?(Array)
          self.loyalty_memberships = value
        end
      end

      if attributes.has_key?(:'lastActivity')
        self.last_activity = attributes[:'lastActivity']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @created.nil?
        invalid_properties.push('invalid value for "created", created cannot be nil.')
      end

      if @integration_id.nil?
        invalid_properties.push('invalid value for "integration_id", integration_id cannot be nil.')
      end

      if @attributes.nil?
        invalid_properties.push('invalid value for "attributes", attributes cannot be nil.')
      end

      if @account_id.nil?
        invalid_properties.push('invalid value for "account_id", account_id cannot be nil.')
      end

      if @closed_sessions.nil?
        invalid_properties.push('invalid value for "closed_sessions", closed_sessions cannot be nil.')
      end

      if @total_sales.nil?
        invalid_properties.push('invalid value for "total_sales", total_sales cannot be nil.')
      end

      if @last_activity.nil?
        invalid_properties.push('invalid value for "last_activity", last_activity cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @created.nil?
      return false if @integration_id.nil?
      return false if @attributes.nil?
      return false if @account_id.nil?
      return false if @closed_sessions.nil?
      return false if @total_sales.nil?
      return false if @last_activity.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          created == o.created &&
          integration_id == o.integration_id &&
          attributes == o.attributes &&
          account_id == o.account_id &&
          closed_sessions == o.closed_sessions &&
          total_sales == o.total_sales &&
          loyalty_memberships == o.loyalty_memberships &&
          last_activity == o.last_activity
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, created, integration_id, attributes, account_id, closed_sessions, total_sales, loyalty_memberships, last_activity].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = TalonOne.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
