=begin
#Talon.One API

#Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerSession](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2) endpoint is `https://mycompany.talon.one/v2/customer_sessions/{Id}` 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module TalonOne
  # 
  class LoyaltyStatistics
    # Date at which data point was collected.
    attr_accessor :date

    # Total of active points for this loyalty program.
    attr_accessor :total_active_points

    # Total of pending points for this loyalty program.
    attr_accessor :total_pending_points

    # Total of spent points for this loyalty program.
    attr_accessor :total_spent_points

    # Total of expired points for this loyalty program.
    attr_accessor :total_expired_points

    # Number of loyalty program members.
    attr_accessor :total_members

    # Number of members who joined on this day.
    attr_accessor :new_members

    attr_accessor :spent_points

    attr_accessor :earned_points

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'date' => :'date',
        :'total_active_points' => :'totalActivePoints',
        :'total_pending_points' => :'totalPendingPoints',
        :'total_spent_points' => :'totalSpentPoints',
        :'total_expired_points' => :'totalExpiredPoints',
        :'total_members' => :'totalMembers',
        :'new_members' => :'newMembers',
        :'spent_points' => :'spentPoints',
        :'earned_points' => :'earnedPoints'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'date' => :'DateTime',
        :'total_active_points' => :'Float',
        :'total_pending_points' => :'Float',
        :'total_spent_points' => :'Float',
        :'total_expired_points' => :'Float',
        :'total_members' => :'Float',
        :'new_members' => :'Float',
        :'spent_points' => :'LoyaltyDashboardPointsBreakdown',
        :'earned_points' => :'LoyaltyDashboardPointsBreakdown'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TalonOne::LoyaltyStatistics` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TalonOne::LoyaltyStatistics`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'date')
        self.date = attributes[:'date']
      end

      if attributes.key?(:'total_active_points')
        self.total_active_points = attributes[:'total_active_points']
      end

      if attributes.key?(:'total_pending_points')
        self.total_pending_points = attributes[:'total_pending_points']
      end

      if attributes.key?(:'total_spent_points')
        self.total_spent_points = attributes[:'total_spent_points']
      end

      if attributes.key?(:'total_expired_points')
        self.total_expired_points = attributes[:'total_expired_points']
      end

      if attributes.key?(:'total_members')
        self.total_members = attributes[:'total_members']
      end

      if attributes.key?(:'new_members')
        self.new_members = attributes[:'new_members']
      end

      if attributes.key?(:'spent_points')
        self.spent_points = attributes[:'spent_points']
      end

      if attributes.key?(:'earned_points')
        self.earned_points = attributes[:'earned_points']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @date.nil?
        invalid_properties.push('invalid value for "date", date cannot be nil.')
      end

      if @total_active_points.nil?
        invalid_properties.push('invalid value for "total_active_points", total_active_points cannot be nil.')
      end

      if @total_pending_points.nil?
        invalid_properties.push('invalid value for "total_pending_points", total_pending_points cannot be nil.')
      end

      if @total_spent_points.nil?
        invalid_properties.push('invalid value for "total_spent_points", total_spent_points cannot be nil.')
      end

      if @total_expired_points.nil?
        invalid_properties.push('invalid value for "total_expired_points", total_expired_points cannot be nil.')
      end

      if @total_members.nil?
        invalid_properties.push('invalid value for "total_members", total_members cannot be nil.')
      end

      if @new_members.nil?
        invalid_properties.push('invalid value for "new_members", new_members cannot be nil.')
      end

      if @spent_points.nil?
        invalid_properties.push('invalid value for "spent_points", spent_points cannot be nil.')
      end

      if @earned_points.nil?
        invalid_properties.push('invalid value for "earned_points", earned_points cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @date.nil?
      return false if @total_active_points.nil?
      return false if @total_pending_points.nil?
      return false if @total_spent_points.nil?
      return false if @total_expired_points.nil?
      return false if @total_members.nil?
      return false if @new_members.nil?
      return false if @spent_points.nil?
      return false if @earned_points.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          date == o.date &&
          total_active_points == o.total_active_points &&
          total_pending_points == o.total_pending_points &&
          total_spent_points == o.total_spent_points &&
          total_expired_points == o.total_expired_points &&
          total_members == o.total_members &&
          new_members == o.new_members &&
          spent_points == o.spent_points &&
          earned_points == o.earned_points
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [date, total_active_points, total_pending_points, total_spent_points, total_expired_points, total_members, new_members, spent_points, earned_points].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        TalonOne.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
