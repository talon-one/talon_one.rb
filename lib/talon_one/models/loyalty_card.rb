=begin
#Talon.One API

#Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 

The version of the OpenAPI document: 

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module TalonOne
  # 
  class LoyaltyCard
    # Internal ID of this entity.
    attr_accessor :id

    # The time this entity was created.
    attr_accessor :created

    # The ID of the loyalty program that owns this entity.
    attr_accessor :program_id

    # Status of the loyalty card. Can be one of: ['active', 'inactive'] 
    attr_accessor :status

    # The alphanumeric identifier of the loyalty card. 
    attr_accessor :identifier

    # The max amount of customer profiles that can be linked to the card. 0 means unlimited. 
    attr_accessor :users_per_card_limit

    # Integration IDs of the customers profiles linked to the card.
    attr_accessor :profiles

    attr_accessor :ledger

    # Displays point balances of the card in the subledgers of the loyalty program.
    attr_accessor :subledgers

    # Timestamp of the most recent update of the loyalty card.
    attr_accessor :modified

    # The alphanumeric identifier of the loyalty card. 
    attr_accessor :old_card_identifier

    # The alphanumeric identifier of the loyalty card. 
    attr_accessor :new_card_identifier

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'created' => :'created',
        :'program_id' => :'programID',
        :'status' => :'status',
        :'identifier' => :'identifier',
        :'users_per_card_limit' => :'usersPerCardLimit',
        :'profiles' => :'profiles',
        :'ledger' => :'ledger',
        :'subledgers' => :'subledgers',
        :'modified' => :'modified',
        :'old_card_identifier' => :'oldCardIdentifier',
        :'new_card_identifier' => :'newCardIdentifier'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'created' => :'DateTime',
        :'program_id' => :'Integer',
        :'status' => :'String',
        :'identifier' => :'String',
        :'users_per_card_limit' => :'Integer',
        :'profiles' => :'Array<LoyaltyCardProfileRegistration>',
        :'ledger' => :'LedgerInfo',
        :'subledgers' => :'Hash<String, LedgerInfo>',
        :'modified' => :'DateTime',
        :'old_card_identifier' => :'String',
        :'new_card_identifier' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TalonOne::LoyaltyCard` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TalonOne::LoyaltyCard`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'program_id')
        self.program_id = attributes[:'program_id']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'identifier')
        self.identifier = attributes[:'identifier']
      end

      if attributes.key?(:'users_per_card_limit')
        self.users_per_card_limit = attributes[:'users_per_card_limit']
      end

      if attributes.key?(:'profiles')
        if (value = attributes[:'profiles']).is_a?(Array)
          self.profiles = value
        end
      end

      if attributes.key?(:'ledger')
        self.ledger = attributes[:'ledger']
      end

      if attributes.key?(:'subledgers')
        if (value = attributes[:'subledgers']).is_a?(Hash)
          self.subledgers = value
        end
      end

      if attributes.key?(:'modified')
        self.modified = attributes[:'modified']
      end

      if attributes.key?(:'old_card_identifier')
        self.old_card_identifier = attributes[:'old_card_identifier']
      end

      if attributes.key?(:'new_card_identifier')
        self.new_card_identifier = attributes[:'new_card_identifier']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @created.nil?
        invalid_properties.push('invalid value for "created", created cannot be nil.')
      end

      if @program_id.nil?
        invalid_properties.push('invalid value for "program_id", program_id cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @identifier.nil?
        invalid_properties.push('invalid value for "identifier", identifier cannot be nil.')
      end

      if @identifier.to_s.length > 108
        invalid_properties.push('invalid value for "identifier", the character length must be smaller than or equal to 108.')
      end

      if @users_per_card_limit.nil?
        invalid_properties.push('invalid value for "users_per_card_limit", users_per_card_limit cannot be nil.')
      end

      if @users_per_card_limit < 0
        invalid_properties.push('invalid value for "users_per_card_limit", must be greater than or equal to 0.')
      end

      if !@old_card_identifier.nil? && @old_card_identifier.to_s.length > 108
        invalid_properties.push('invalid value for "old_card_identifier", the character length must be smaller than or equal to 108.')
      end

      if !@new_card_identifier.nil? && @new_card_identifier.to_s.length > 108
        invalid_properties.push('invalid value for "new_card_identifier", the character length must be smaller than or equal to 108.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @created.nil?
      return false if @program_id.nil?
      return false if @status.nil?
      return false if @identifier.nil?
      return false if @identifier.to_s.length > 108
      return false if @users_per_card_limit.nil?
      return false if @users_per_card_limit < 0
      return false if !@old_card_identifier.nil? && @old_card_identifier.to_s.length > 108
      return false if !@new_card_identifier.nil? && @new_card_identifier.to_s.length > 108
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] identifier Value to be assigned
    def identifier=(identifier)
      if identifier.nil?
        fail ArgumentError, 'identifier cannot be nil'
      end

      if identifier.to_s.length > 108
        fail ArgumentError, 'invalid value for "identifier", the character length must be smaller than or equal to 108.'
      end

      @identifier = identifier
    end

    # Custom attribute writer method with validation
    # @param [Object] users_per_card_limit Value to be assigned
    def users_per_card_limit=(users_per_card_limit)
      if users_per_card_limit.nil?
        fail ArgumentError, 'users_per_card_limit cannot be nil'
      end

      if users_per_card_limit < 0
        fail ArgumentError, 'invalid value for "users_per_card_limit", must be greater than or equal to 0.'
      end

      @users_per_card_limit = users_per_card_limit
    end

    # Custom attribute writer method with validation
    # @param [Object] old_card_identifier Value to be assigned
    def old_card_identifier=(old_card_identifier)
      if !old_card_identifier.nil? && old_card_identifier.to_s.length > 108
        fail ArgumentError, 'invalid value for "old_card_identifier", the character length must be smaller than or equal to 108.'
      end

      @old_card_identifier = old_card_identifier
    end

    # Custom attribute writer method with validation
    # @param [Object] new_card_identifier Value to be assigned
    def new_card_identifier=(new_card_identifier)
      if !new_card_identifier.nil? && new_card_identifier.to_s.length > 108
        fail ArgumentError, 'invalid value for "new_card_identifier", the character length must be smaller than or equal to 108.'
      end

      @new_card_identifier = new_card_identifier
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          created == o.created &&
          program_id == o.program_id &&
          status == o.status &&
          identifier == o.identifier &&
          users_per_card_limit == o.users_per_card_limit &&
          profiles == o.profiles &&
          ledger == o.ledger &&
          subledgers == o.subledgers &&
          modified == o.modified &&
          old_card_identifier == o.old_card_identifier &&
          new_card_identifier == o.new_card_identifier
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, created, program_id, status, identifier, users_per_card_limit, profiles, ledger, subledgers, modified, old_card_identifier, new_card_identifier].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        TalonOne.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
