=begin
#Talon.One API

#Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerSession](https://docs.talon.one/integration-api/#operation/updateCustomerSessionV2) endpoint is `https://mycompany.talon.one/v2/customer_sessions/{Id}` 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module TalonOne
  # 
  class CustomerActivityReport
    # The integration ID for this entity sent to and used in the Talon.One system.
    attr_accessor :integration_id

    # The exact moment this entity was created.
    attr_accessor :created

    # The name for this customer profile.
    attr_accessor :name

    # The internal Talon.One ID of the customer.
    attr_accessor :customer_id

    # The last activity of the customer.
    attr_accessor :last_activity

    # Number of coupon redemptions in all customer campaigns.
    attr_accessor :coupon_redemptions

    # Number of coupon use attempts in all customer campaigns.
    attr_accessor :coupon_use_attempts

    # Number of failed coupon use attempts in all customer campaigns.
    attr_accessor :coupon_failed_attempts

    # Number of accrued discounts in all customer campaigns.
    attr_accessor :accrued_discounts

    # Amount of accrued revenue in all customer campaigns.
    attr_accessor :accrued_revenue

    # Number of orders in all customer campaigns.
    attr_accessor :total_orders

    # Number of orders without coupon used in all customer campaigns.
    attr_accessor :total_orders_no_coupon

    # The name of the campaign this customer belongs to.
    attr_accessor :campaign_name

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'integration_id' => :'integrationId',
        :'created' => :'created',
        :'name' => :'name',
        :'customer_id' => :'customerId',
        :'last_activity' => :'lastActivity',
        :'coupon_redemptions' => :'couponRedemptions',
        :'coupon_use_attempts' => :'couponUseAttempts',
        :'coupon_failed_attempts' => :'couponFailedAttempts',
        :'accrued_discounts' => :'accruedDiscounts',
        :'accrued_revenue' => :'accruedRevenue',
        :'total_orders' => :'totalOrders',
        :'total_orders_no_coupon' => :'totalOrdersNoCoupon',
        :'campaign_name' => :'campaignName'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'integration_id' => :'String',
        :'created' => :'DateTime',
        :'name' => :'String',
        :'customer_id' => :'Integer',
        :'last_activity' => :'DateTime',
        :'coupon_redemptions' => :'Integer',
        :'coupon_use_attempts' => :'Integer',
        :'coupon_failed_attempts' => :'Integer',
        :'accrued_discounts' => :'Float',
        :'accrued_revenue' => :'Float',
        :'total_orders' => :'Integer',
        :'total_orders_no_coupon' => :'Integer',
        :'campaign_name' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TalonOne::CustomerActivityReport` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TalonOne::CustomerActivityReport`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'integration_id')
        self.integration_id = attributes[:'integration_id']
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'customer_id')
        self.customer_id = attributes[:'customer_id']
      end

      if attributes.key?(:'last_activity')
        self.last_activity = attributes[:'last_activity']
      end

      if attributes.key?(:'coupon_redemptions')
        self.coupon_redemptions = attributes[:'coupon_redemptions']
      end

      if attributes.key?(:'coupon_use_attempts')
        self.coupon_use_attempts = attributes[:'coupon_use_attempts']
      end

      if attributes.key?(:'coupon_failed_attempts')
        self.coupon_failed_attempts = attributes[:'coupon_failed_attempts']
      end

      if attributes.key?(:'accrued_discounts')
        self.accrued_discounts = attributes[:'accrued_discounts']
      end

      if attributes.key?(:'accrued_revenue')
        self.accrued_revenue = attributes[:'accrued_revenue']
      end

      if attributes.key?(:'total_orders')
        self.total_orders = attributes[:'total_orders']
      end

      if attributes.key?(:'total_orders_no_coupon')
        self.total_orders_no_coupon = attributes[:'total_orders_no_coupon']
      end

      if attributes.key?(:'campaign_name')
        self.campaign_name = attributes[:'campaign_name']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @integration_id.nil?
        invalid_properties.push('invalid value for "integration_id", integration_id cannot be nil.')
      end

      if @integration_id.to_s.length > 1000
        invalid_properties.push('invalid value for "integration_id", the character length must be smaller than or equal to 1000.')
      end

      if @created.nil?
        invalid_properties.push('invalid value for "created", created cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @customer_id.nil?
        invalid_properties.push('invalid value for "customer_id", customer_id cannot be nil.')
      end

      if @coupon_redemptions.nil?
        invalid_properties.push('invalid value for "coupon_redemptions", coupon_redemptions cannot be nil.')
      end

      if @coupon_use_attempts.nil?
        invalid_properties.push('invalid value for "coupon_use_attempts", coupon_use_attempts cannot be nil.')
      end

      if @coupon_failed_attempts.nil?
        invalid_properties.push('invalid value for "coupon_failed_attempts", coupon_failed_attempts cannot be nil.')
      end

      if @accrued_discounts.nil?
        invalid_properties.push('invalid value for "accrued_discounts", accrued_discounts cannot be nil.')
      end

      if @accrued_revenue.nil?
        invalid_properties.push('invalid value for "accrued_revenue", accrued_revenue cannot be nil.')
      end

      if @total_orders.nil?
        invalid_properties.push('invalid value for "total_orders", total_orders cannot be nil.')
      end

      if @total_orders_no_coupon.nil?
        invalid_properties.push('invalid value for "total_orders_no_coupon", total_orders_no_coupon cannot be nil.')
      end

      if @campaign_name.nil?
        invalid_properties.push('invalid value for "campaign_name", campaign_name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @integration_id.nil?
      return false if @integration_id.to_s.length > 1000
      return false if @created.nil?
      return false if @name.nil?
      return false if @customer_id.nil?
      return false if @coupon_redemptions.nil?
      return false if @coupon_use_attempts.nil?
      return false if @coupon_failed_attempts.nil?
      return false if @accrued_discounts.nil?
      return false if @accrued_revenue.nil?
      return false if @total_orders.nil?
      return false if @total_orders_no_coupon.nil?
      return false if @campaign_name.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] integration_id Value to be assigned
    def integration_id=(integration_id)
      if integration_id.nil?
        fail ArgumentError, 'integration_id cannot be nil'
      end

      if integration_id.to_s.length > 1000
        fail ArgumentError, 'invalid value for "integration_id", the character length must be smaller than or equal to 1000.'
      end

      @integration_id = integration_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          integration_id == o.integration_id &&
          created == o.created &&
          name == o.name &&
          customer_id == o.customer_id &&
          last_activity == o.last_activity &&
          coupon_redemptions == o.coupon_redemptions &&
          coupon_use_attempts == o.coupon_use_attempts &&
          coupon_failed_attempts == o.coupon_failed_attempts &&
          accrued_discounts == o.accrued_discounts &&
          accrued_revenue == o.accrued_revenue &&
          total_orders == o.total_orders &&
          total_orders_no_coupon == o.total_orders_no_coupon &&
          campaign_name == o.campaign_name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [integration_id, created, name, customer_id, last_activity, coupon_redemptions, coupon_use_attempts, coupon_failed_attempts, accrued_discounts, accrued_revenue, total_orders, total_orders_no_coupon, campaign_name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        TalonOne.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
