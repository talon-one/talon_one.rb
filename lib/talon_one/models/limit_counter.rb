=begin
#Talon.One API

#Use the Talon.One API to integrate with your application and to manage applications and campaigns:  - Use the operations in the [Integration API section](#integration-api) are used to integrate with our platform - Use the operation in the [Management API section](#management-api) to manage applications and campaigns.  ## Determining the base URL of the endpoints  The API is available at the same hostname as your Campaign Manager deployment. For example, if you access the Campaign Manager at `https://yourbaseurl.talon.one/`, the URL for the [updateCustomerSessionV2](https://docs.talon.one/integration-api#operation/updateCustomerSessionV2) endpoint is `https://yourbaseurl.talon.one/v2/customer_sessions/{Id}` 

The version of the OpenAPI document: 

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module TalonOne
  # 
  class LimitCounter
    # The ID of the campaign that owns this entity.
    attr_accessor :campaign_id

    # The ID of the application that owns this entity.
    attr_accessor :application_id

    # The ID of the account that owns this entity.
    attr_accessor :account_id

    # Unique ID for this entity.
    attr_accessor :id

    # The limitable action of the limit counter.
    attr_accessor :action

    # The profile ID for which this limit counter is used.
    attr_accessor :profile_id

    # The profile integration ID for which this limit counter is used.
    attr_accessor :profile_integration_id

    # The internal coupon ID for which this limit counter is used.
    attr_accessor :coupon_id

    # The coupon value for which this limit counter is used.
    attr_accessor :coupon_value

    # The referral ID for which this limit counter is used.
    attr_accessor :referral_id

    # The referral value for which this limit counter is used.
    attr_accessor :referral_value

    # The arbitrary identifier for which this limit counter is used.
    attr_accessor :identifier

    # The time period for which this limit counter is used.
    attr_accessor :period

    # The highest possible value for this limit counter.
    attr_accessor :limit

    # The current value for this limit counter.
    attr_accessor :counter

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'campaign_id' => :'campaignId',
        :'application_id' => :'applicationId',
        :'account_id' => :'accountId',
        :'id' => :'id',
        :'action' => :'action',
        :'profile_id' => :'profileId',
        :'profile_integration_id' => :'profileIntegrationId',
        :'coupon_id' => :'couponId',
        :'coupon_value' => :'couponValue',
        :'referral_id' => :'referralId',
        :'referral_value' => :'referralValue',
        :'identifier' => :'identifier',
        :'period' => :'period',
        :'limit' => :'limit',
        :'counter' => :'counter'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'campaign_id' => :'Integer',
        :'application_id' => :'Integer',
        :'account_id' => :'Integer',
        :'id' => :'Integer',
        :'action' => :'String',
        :'profile_id' => :'Integer',
        :'profile_integration_id' => :'String',
        :'coupon_id' => :'Integer',
        :'coupon_value' => :'String',
        :'referral_id' => :'Integer',
        :'referral_value' => :'String',
        :'identifier' => :'String',
        :'period' => :'String',
        :'limit' => :'Float',
        :'counter' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TalonOne::LimitCounter` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TalonOne::LimitCounter`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'campaign_id')
        self.campaign_id = attributes[:'campaign_id']
      end

      if attributes.key?(:'application_id')
        self.application_id = attributes[:'application_id']
      end

      if attributes.key?(:'account_id')
        self.account_id = attributes[:'account_id']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'action')
        self.action = attributes[:'action']
      end

      if attributes.key?(:'profile_id')
        self.profile_id = attributes[:'profile_id']
      end

      if attributes.key?(:'profile_integration_id')
        self.profile_integration_id = attributes[:'profile_integration_id']
      end

      if attributes.key?(:'coupon_id')
        self.coupon_id = attributes[:'coupon_id']
      end

      if attributes.key?(:'coupon_value')
        self.coupon_value = attributes[:'coupon_value']
      end

      if attributes.key?(:'referral_id')
        self.referral_id = attributes[:'referral_id']
      end

      if attributes.key?(:'referral_value')
        self.referral_value = attributes[:'referral_value']
      end

      if attributes.key?(:'identifier')
        self.identifier = attributes[:'identifier']
      end

      if attributes.key?(:'period')
        self.period = attributes[:'period']
      end

      if attributes.key?(:'limit')
        self.limit = attributes[:'limit']
      end

      if attributes.key?(:'counter')
        self.counter = attributes[:'counter']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @campaign_id.nil?
        invalid_properties.push('invalid value for "campaign_id", campaign_id cannot be nil.')
      end

      if @application_id.nil?
        invalid_properties.push('invalid value for "application_id", application_id cannot be nil.')
      end

      if @account_id.nil?
        invalid_properties.push('invalid value for "account_id", account_id cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @action.nil?
        invalid_properties.push('invalid value for "action", action cannot be nil.')
      end

      if !@profile_integration_id.nil? && @profile_integration_id.to_s.length > 1000
        invalid_properties.push('invalid value for "profile_integration_id", the character length must be smaller than or equal to 1000.')
      end

      if @limit.nil?
        invalid_properties.push('invalid value for "limit", limit cannot be nil.')
      end

      if @counter.nil?
        invalid_properties.push('invalid value for "counter", counter cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @campaign_id.nil?
      return false if @application_id.nil?
      return false if @account_id.nil?
      return false if @id.nil?
      return false if @action.nil?
      return false if !@profile_integration_id.nil? && @profile_integration_id.to_s.length > 1000
      return false if @limit.nil?
      return false if @counter.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] profile_integration_id Value to be assigned
    def profile_integration_id=(profile_integration_id)
      if !profile_integration_id.nil? && profile_integration_id.to_s.length > 1000
        fail ArgumentError, 'invalid value for "profile_integration_id", the character length must be smaller than or equal to 1000.'
      end

      @profile_integration_id = profile_integration_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          campaign_id == o.campaign_id &&
          application_id == o.application_id &&
          account_id == o.account_id &&
          id == o.id &&
          action == o.action &&
          profile_id == o.profile_id &&
          profile_integration_id == o.profile_integration_id &&
          coupon_id == o.coupon_id &&
          coupon_value == o.coupon_value &&
          referral_id == o.referral_id &&
          referral_value == o.referral_value &&
          identifier == o.identifier &&
          period == o.period &&
          limit == o.limit &&
          counter == o.counter
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [campaign_id, application_id, account_id, id, action, profile_id, profile_integration_id, coupon_id, coupon_value, referral_id, referral_value, identifier, period, limit, counter].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        TalonOne.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
