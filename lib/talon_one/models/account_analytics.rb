=begin
#Talon.One API

#The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation--v1-customer_profiles--integrationId--put 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module TalonOne
  class AccountAnalytics
    # Total Number of Applications inside the account
    attr_accessor :applications

    # Total Number of Active Applications inside the account
    attr_accessor :active_campaigns

    # Total Number of campaigns inside the account
    attr_accessor :campaigns

    # Total Number of coupons inside the account
    attr_accessor :coupons

    # Total Number of active coupons inside the account
    attr_accessor :active_coupons

    # Total Number of expired coupons inside the account
    attr_accessor :expired_coupons

    # Total Number of custom attributes inside the account
    attr_accessor :custom_attributes

    # Total Number of referral codes inside the account
    attr_accessor :referral_codes

    # Total Number of active referral codes inside the account
    attr_accessor :active_referral_codes

    # Total Number of expired referral codes inside the account
    attr_accessor :expired_referral_codes

    # Total Number of users inside the account
    attr_accessor :users

    # Total Number of roles inside the account
    attr_accessor :roles

    # Total Number of webhooks inside the account
    attr_accessor :webhooks

    # Total Number of loyalty programs inside the account
    attr_accessor :loyalty_programs

    # Total Number of active rules in the account
    attr_accessor :active_rules

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'applications' => :'applications',
        :'active_campaigns' => :'activeCampaigns',
        :'campaigns' => :'campaigns',
        :'coupons' => :'coupons',
        :'active_coupons' => :'activeCoupons',
        :'expired_coupons' => :'expiredCoupons',
        :'custom_attributes' => :'customAttributes',
        :'referral_codes' => :'referralCodes',
        :'active_referral_codes' => :'activeReferralCodes',
        :'expired_referral_codes' => :'expiredReferralCodes',
        :'users' => :'users',
        :'roles' => :'roles',
        :'webhooks' => :'webhooks',
        :'loyalty_programs' => :'loyaltyPrograms',
        :'active_rules' => :'activeRules'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'applications' => :'Integer',
        :'active_campaigns' => :'Integer',
        :'campaigns' => :'Integer',
        :'coupons' => :'Integer',
        :'active_coupons' => :'Integer',
        :'expired_coupons' => :'Integer',
        :'custom_attributes' => :'Integer',
        :'referral_codes' => :'Integer',
        :'active_referral_codes' => :'Integer',
        :'expired_referral_codes' => :'Integer',
        :'users' => :'Integer',
        :'roles' => :'Integer',
        :'webhooks' => :'Integer',
        :'loyalty_programs' => :'Integer',
        :'active_rules' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'applications')
        self.applications = attributes[:'applications']
      end

      if attributes.has_key?(:'activeCampaigns')
        self.active_campaigns = attributes[:'activeCampaigns']
      end

      if attributes.has_key?(:'campaigns')
        self.campaigns = attributes[:'campaigns']
      end

      if attributes.has_key?(:'coupons')
        self.coupons = attributes[:'coupons']
      end

      if attributes.has_key?(:'activeCoupons')
        self.active_coupons = attributes[:'activeCoupons']
      end

      if attributes.has_key?(:'expiredCoupons')
        self.expired_coupons = attributes[:'expiredCoupons']
      end

      if attributes.has_key?(:'customAttributes')
        self.custom_attributes = attributes[:'customAttributes']
      end

      if attributes.has_key?(:'referralCodes')
        self.referral_codes = attributes[:'referralCodes']
      end

      if attributes.has_key?(:'activeReferralCodes')
        self.active_referral_codes = attributes[:'activeReferralCodes']
      end

      if attributes.has_key?(:'expiredReferralCodes')
        self.expired_referral_codes = attributes[:'expiredReferralCodes']
      end

      if attributes.has_key?(:'users')
        self.users = attributes[:'users']
      end

      if attributes.has_key?(:'roles')
        self.roles = attributes[:'roles']
      end

      if attributes.has_key?(:'webhooks')
        self.webhooks = attributes[:'webhooks']
      end

      if attributes.has_key?(:'loyaltyPrograms')
        self.loyalty_programs = attributes[:'loyaltyPrograms']
      end

      if attributes.has_key?(:'activeRules')
        self.active_rules = attributes[:'activeRules']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @applications.nil?
        invalid_properties.push('invalid value for "applications", applications cannot be nil.')
      end

      if @active_campaigns.nil?
        invalid_properties.push('invalid value for "active_campaigns", active_campaigns cannot be nil.')
      end

      if @campaigns.nil?
        invalid_properties.push('invalid value for "campaigns", campaigns cannot be nil.')
      end

      if @coupons.nil?
        invalid_properties.push('invalid value for "coupons", coupons cannot be nil.')
      end

      if @active_coupons.nil?
        invalid_properties.push('invalid value for "active_coupons", active_coupons cannot be nil.')
      end

      if @expired_coupons.nil?
        invalid_properties.push('invalid value for "expired_coupons", expired_coupons cannot be nil.')
      end

      if @custom_attributes.nil?
        invalid_properties.push('invalid value for "custom_attributes", custom_attributes cannot be nil.')
      end

      if @referral_codes.nil?
        invalid_properties.push('invalid value for "referral_codes", referral_codes cannot be nil.')
      end

      if @active_referral_codes.nil?
        invalid_properties.push('invalid value for "active_referral_codes", active_referral_codes cannot be nil.')
      end

      if @expired_referral_codes.nil?
        invalid_properties.push('invalid value for "expired_referral_codes", expired_referral_codes cannot be nil.')
      end

      if @users.nil?
        invalid_properties.push('invalid value for "users", users cannot be nil.')
      end

      if @roles.nil?
        invalid_properties.push('invalid value for "roles", roles cannot be nil.')
      end

      if @webhooks.nil?
        invalid_properties.push('invalid value for "webhooks", webhooks cannot be nil.')
      end

      if @loyalty_programs.nil?
        invalid_properties.push('invalid value for "loyalty_programs", loyalty_programs cannot be nil.')
      end

      if @active_rules.nil?
        invalid_properties.push('invalid value for "active_rules", active_rules cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @applications.nil?
      return false if @active_campaigns.nil?
      return false if @campaigns.nil?
      return false if @coupons.nil?
      return false if @active_coupons.nil?
      return false if @expired_coupons.nil?
      return false if @custom_attributes.nil?
      return false if @referral_codes.nil?
      return false if @active_referral_codes.nil?
      return false if @expired_referral_codes.nil?
      return false if @users.nil?
      return false if @roles.nil?
      return false if @webhooks.nil?
      return false if @loyalty_programs.nil?
      return false if @active_rules.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          applications == o.applications &&
          active_campaigns == o.active_campaigns &&
          campaigns == o.campaigns &&
          coupons == o.coupons &&
          active_coupons == o.active_coupons &&
          expired_coupons == o.expired_coupons &&
          custom_attributes == o.custom_attributes &&
          referral_codes == o.referral_codes &&
          active_referral_codes == o.active_referral_codes &&
          expired_referral_codes == o.expired_referral_codes &&
          users == o.users &&
          roles == o.roles &&
          webhooks == o.webhooks &&
          loyalty_programs == o.loyalty_programs &&
          active_rules == o.active_rules
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [applications, active_campaigns, campaigns, coupons, active_coupons, expired_coupons, custom_attributes, referral_codes, active_referral_codes, expired_referral_codes, users, roles, webhooks, loyalty_programs, active_rules].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = TalonOne.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
